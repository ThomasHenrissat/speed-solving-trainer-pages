{"mappings":"A,S,E,C,E,O,G,E,U,C,E,O,C,C,C,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,E,Q,C,I,E,E,S,E,C,E,E,C,E,E,E,S,E,C,EIqBA,EAZA,SAAmB,CAAK,CAAE,CAAQ,EAIhC,IAHA,IAAI,EAAQ,GACR,EAAS,AAAS,MAAT,EAAgB,EAAI,EAAM,MAAM,CAEtC,EAAE,EAAQ,GACX,AAAyC,CAAA,IAAzC,EAAS,CAAK,CAAC,EAAM,CAAE,EAAO,KAIpC,OAAO,CACT,E,I,E,E,S,E,C,E,E,E,S,E,E,SCHA,EAJA,SAAoB,CAAM,CAAE,CAAM,EAChC,OAAO,GAAU,EAAW,EAAQ,EAAK,GAAS,EACpD,E,I,E,C,E,E,E,S,E,E,SCEA,EAJA,SAAsB,CAAM,CAAE,CAAM,EAClC,OAAO,GAAU,EAAW,EAAQ,EAAO,GAAS,EACtD,E,I,E,E,S,E,E,S,E,C,E,E,E,S,E,E,SCCA,EAJA,SAAqB,CAAM,CAAE,CAAM,EACjC,OAAO,EAAW,EAAQ,EAAW,GAAS,EAChD,E,I,E,C,E,E,E,S,E,C,E,E,E,S,E,E,S,E,E,S,E,E,SEWA,EATmB,AATI,OAAO,qBAAqB,CASA,SAAS,CAAM,EAEhE,IADA,IAAI,EAAS,EAAE,CACR,GACL,EAAU,EAAQ,EAAW,IAC7B,EAAS,EAAa,GAExB,OAAO,CACT,EAPuC,EDAvC,EAJA,SAAuB,CAAM,CAAE,CAAM,EACnC,OAAO,EAAW,EAAQ,EAAa,GAAS,EAClD,E,I,E,E,S,E,C,E,E,E,S,E,E,SEGA,EAJA,SAAsB,CAAM,EAC1B,OAAO,EAAe,EAAQ,EAAQ,EACxC,E,I,E,E,S,E,C,ECVI,EAAiB,AAHH,OAAO,SAAS,CAGD,cAAc,CAqB/C,EAZA,SAAwB,CAAK,EAC3B,IAAI,EAAS,EAAM,MAAM,CACrB,EAAS,IAAI,EAAM,WA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","sources":["<anon>","src/scripts/Editor.tsx","node_modules/lodash/cloneDeep.js","node_modules/lodash/_baseClone.js","node_modules/lodash/_arrayEach.js","node_modules/lodash/_baseAssign.js","node_modules/lodash/_baseAssignIn.js","node_modules/lodash/_copySymbols.js","node_modules/lodash/_copySymbolsIn.js","node_modules/lodash/_getSymbolsIn.js","node_modules/lodash/_getAllKeysIn.js","node_modules/lodash/_initCloneArray.js","node_modules/lodash/_initCloneByTag.js","node_modules/lodash/_cloneDataView.js","node_modules/lodash/_cloneRegExp.js","node_modules/lodash/_cloneSymbol.js","node_modules/lodash/isMap.js","node_modules/lodash/_baseIsMap.js","node_modules/lodash/isSet.js","node_modules/lodash/_baseIsSet.js","src/scripts/components/EditorCase.tsx","src/scripts/components/Input.tsx","src/scripts/components/EditorPreview.tsx","src/scripts/components/EditorSet.tsx","src/scripts/components/Modal.tsx","src/scripts/components/Select.tsx","src/scripts/components/Textarea.tsx"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequirec931\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequirec931\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $ayMG0 = parcelRequire(\"ayMG0\");\nvar $d9b513d63d79678d$exports = {};\nvar $ee040e257a097984$exports = {};\n\nvar $g779E = parcelRequire(\"g779E\");\nvar $88035f224ff89479$exports = {};\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */ function $88035f224ff89479$var$arrayEach(array, iteratee) {\n    var index = -1, length = array == null ? 0 : array.length;\n    while(++index < length){\n        if (iteratee(array[index], index, array) === false) break;\n    }\n    return array;\n}\n$88035f224ff89479$exports = $88035f224ff89479$var$arrayEach;\n\n\n\nvar $5i71d = parcelRequire(\"5i71d\");\nvar $0b43ef5c64ba7f70$exports = {};\n\nvar $cYlGN = parcelRequire(\"cYlGN\");\n\nvar $LAMcS = parcelRequire(\"LAMcS\");\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */ function $0b43ef5c64ba7f70$var$baseAssign(object, source) {\n    return object && $cYlGN(source, $LAMcS(source), object);\n}\n$0b43ef5c64ba7f70$exports = $0b43ef5c64ba7f70$var$baseAssign;\n\n\nvar $0e266213253a5976$exports = {};\n\nvar $cYlGN = parcelRequire(\"cYlGN\");\n\nvar $f4lqP = parcelRequire(\"f4lqP\");\n/**\n * The base implementation of `_.assignIn` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */ function $0e266213253a5976$var$baseAssignIn(object, source) {\n    return object && $cYlGN(source, $f4lqP(source), object);\n}\n$0e266213253a5976$exports = $0e266213253a5976$var$baseAssignIn;\n\n\n\nvar $uQ1Em = parcelRequire(\"uQ1Em\");\n\nvar $aA0pv = parcelRequire(\"aA0pv\");\nvar $ce60b583e6a24a63$exports = {};\n\nvar $cYlGN = parcelRequire(\"cYlGN\");\n\nvar $6YcYN = parcelRequire(\"6YcYN\");\n/**\n * Copies own symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */ function $ce60b583e6a24a63$var$copySymbols(source, object) {\n    return $cYlGN(source, $6YcYN(source), object);\n}\n$ce60b583e6a24a63$exports = $ce60b583e6a24a63$var$copySymbols;\n\n\nvar $55e06195de8b50ba$exports = {};\n\nvar $cYlGN = parcelRequire(\"cYlGN\");\nvar $77e3eeed2d30c6bc$exports = {};\n\nvar $hynws = parcelRequire(\"hynws\");\n\nvar $cdnOB = parcelRequire(\"cdnOB\");\n\nvar $6YcYN = parcelRequire(\"6YcYN\");\n\nvar $clnSu = parcelRequire(\"clnSu\");\n/* Built-in method references for those with the same name as other `lodash` methods. */ var $77e3eeed2d30c6bc$var$nativeGetSymbols = Object.getOwnPropertySymbols;\n/**\n * Creates an array of the own and inherited enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */ var $77e3eeed2d30c6bc$var$getSymbolsIn = !$77e3eeed2d30c6bc$var$nativeGetSymbols ? $clnSu : function(object) {\n    var result = [];\n    while(object){\n        $hynws(result, $6YcYN(object));\n        object = $cdnOB(object);\n    }\n    return result;\n};\n$77e3eeed2d30c6bc$exports = $77e3eeed2d30c6bc$var$getSymbolsIn;\n\n\n/**\n * Copies own and inherited symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */ function $55e06195de8b50ba$var$copySymbolsIn(source, object) {\n    return $cYlGN(source, $77e3eeed2d30c6bc$exports(source), object);\n}\n$55e06195de8b50ba$exports = $55e06195de8b50ba$var$copySymbolsIn;\n\n\n\nvar $apVCl = parcelRequire(\"apVCl\");\nvar $d1b85174ea17081a$exports = {};\n\nvar $ctgi8 = parcelRequire(\"ctgi8\");\n\n\nvar $f4lqP = parcelRequire(\"f4lqP\");\n/**\n * Creates an array of own and inherited enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */ function $d1b85174ea17081a$var$getAllKeysIn(object) {\n    return $ctgi8(object, $f4lqP, $77e3eeed2d30c6bc$exports);\n}\n$d1b85174ea17081a$exports = $d1b85174ea17081a$var$getAllKeysIn;\n\n\n\nvar $67A6V = parcelRequire(\"67A6V\");\nvar $392dfd68f4953502$exports = {};\n/** Used for built-in method references. */ var $392dfd68f4953502$var$objectProto = Object.prototype;\n/** Used to check objects for own properties. */ var $392dfd68f4953502$var$hasOwnProperty = $392dfd68f4953502$var$objectProto.hasOwnProperty;\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */ function $392dfd68f4953502$var$initCloneArray(array) {\n    var length = array.length, result = new array.constructor(length);\n    // Add properties assigned by `RegExp#exec`.\n    if (length && typeof array[0] == \"string\" && $392dfd68f4953502$var$hasOwnProperty.call(array, \"index\")) {\n        result.index = array.index;\n        result.input = array.input;\n    }\n    return result;\n}\n$392dfd68f4953502$exports = $392dfd68f4953502$var$initCloneArray;\n\n\nvar $85aa01d56b12d536$exports = {};\n\nvar $jjbq1 = parcelRequire(\"jjbq1\");\nvar $7d49423a2080f7e8$exports = {};\n\nvar $jjbq1 = parcelRequire(\"jjbq1\");\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */ function $7d49423a2080f7e8$var$cloneDataView(dataView, isDeep) {\n    var buffer = isDeep ? $jjbq1(dataView.buffer) : dataView.buffer;\n    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n$7d49423a2080f7e8$exports = $7d49423a2080f7e8$var$cloneDataView;\n\n\nvar $42a38980bea1ca34$exports = {};\n/** Used to match `RegExp` flags from their coerced string values. */ var $42a38980bea1ca34$var$reFlags = /\\w*$/;\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */ function $42a38980bea1ca34$var$cloneRegExp(regexp) {\n    var result = new regexp.constructor(regexp.source, $42a38980bea1ca34$var$reFlags.exec(regexp));\n    result.lastIndex = regexp.lastIndex;\n    return result;\n}\n$42a38980bea1ca34$exports = $42a38980bea1ca34$var$cloneRegExp;\n\n\nvar $e3a191b3227aae5b$exports = {};\n\nvar $57wYk = parcelRequire(\"57wYk\");\n/** Used to convert symbols to primitives and strings. */ var $e3a191b3227aae5b$var$symbolProto = $57wYk ? $57wYk.prototype : undefined, $e3a191b3227aae5b$var$symbolValueOf = $e3a191b3227aae5b$var$symbolProto ? $e3a191b3227aae5b$var$symbolProto.valueOf : undefined;\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */ function $e3a191b3227aae5b$var$cloneSymbol(symbol) {\n    return $e3a191b3227aae5b$var$symbolValueOf ? Object($e3a191b3227aae5b$var$symbolValueOf.call(symbol)) : {};\n}\n$e3a191b3227aae5b$exports = $e3a191b3227aae5b$var$cloneSymbol;\n\n\n\nvar $5JAGM = parcelRequire(\"5JAGM\");\n/** `Object#toString` result references. */ var $85aa01d56b12d536$var$boolTag = \"[object Boolean]\", $85aa01d56b12d536$var$dateTag = \"[object Date]\", $85aa01d56b12d536$var$mapTag = \"[object Map]\", $85aa01d56b12d536$var$numberTag = \"[object Number]\", $85aa01d56b12d536$var$regexpTag = \"[object RegExp]\", $85aa01d56b12d536$var$setTag = \"[object Set]\", $85aa01d56b12d536$var$stringTag = \"[object String]\", $85aa01d56b12d536$var$symbolTag = \"[object Symbol]\";\nvar $85aa01d56b12d536$var$arrayBufferTag = \"[object ArrayBuffer]\", $85aa01d56b12d536$var$dataViewTag = \"[object DataView]\", $85aa01d56b12d536$var$float32Tag = \"[object Float32Array]\", $85aa01d56b12d536$var$float64Tag = \"[object Float64Array]\", $85aa01d56b12d536$var$int8Tag = \"[object Int8Array]\", $85aa01d56b12d536$var$int16Tag = \"[object Int16Array]\", $85aa01d56b12d536$var$int32Tag = \"[object Int32Array]\", $85aa01d56b12d536$var$uint8Tag = \"[object Uint8Array]\", $85aa01d56b12d536$var$uint8ClampedTag = \"[object Uint8ClampedArray]\", $85aa01d56b12d536$var$uint16Tag = \"[object Uint16Array]\", $85aa01d56b12d536$var$uint32Tag = \"[object Uint32Array]\";\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */ function $85aa01d56b12d536$var$initCloneByTag(object, tag, isDeep) {\n    var Ctor = object.constructor;\n    switch(tag){\n        case $85aa01d56b12d536$var$arrayBufferTag:\n            return $jjbq1(object);\n        case $85aa01d56b12d536$var$boolTag:\n        case $85aa01d56b12d536$var$dateTag:\n            return new Ctor(+object);\n        case $85aa01d56b12d536$var$dataViewTag:\n            return $7d49423a2080f7e8$exports(object, isDeep);\n        case $85aa01d56b12d536$var$float32Tag:\n        case $85aa01d56b12d536$var$float64Tag:\n        case $85aa01d56b12d536$var$int8Tag:\n        case $85aa01d56b12d536$var$int16Tag:\n        case $85aa01d56b12d536$var$int32Tag:\n        case $85aa01d56b12d536$var$uint8Tag:\n        case $85aa01d56b12d536$var$uint8ClampedTag:\n        case $85aa01d56b12d536$var$uint16Tag:\n        case $85aa01d56b12d536$var$uint32Tag:\n            return $5JAGM(object, isDeep);\n        case $85aa01d56b12d536$var$mapTag:\n            return new Ctor;\n        case $85aa01d56b12d536$var$numberTag:\n        case $85aa01d56b12d536$var$stringTag:\n            return new Ctor(object);\n        case $85aa01d56b12d536$var$regexpTag:\n            return $42a38980bea1ca34$exports(object);\n        case $85aa01d56b12d536$var$setTag:\n            return new Ctor;\n        case $85aa01d56b12d536$var$symbolTag:\n            return $e3a191b3227aae5b$exports(object);\n    }\n}\n$85aa01d56b12d536$exports = $85aa01d56b12d536$var$initCloneByTag;\n\n\n\nvar $dFJsF = parcelRequire(\"dFJsF\");\n\nvar $o8HxT = parcelRequire(\"o8HxT\");\n\nvar $f504n = parcelRequire(\"f504n\");\nvar $abac330771f68232$exports = {};\nvar $7262133281c40437$exports = {};\n\nvar $67A6V = parcelRequire(\"67A6V\");\n\nvar $8l89S = parcelRequire(\"8l89S\");\n/** `Object#toString` result references. */ var $7262133281c40437$var$mapTag = \"[object Map]\";\n/**\n * The base implementation of `_.isMap` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n */ function $7262133281c40437$var$baseIsMap(value) {\n    return $8l89S(value) && $67A6V(value) == $7262133281c40437$var$mapTag;\n}\n$7262133281c40437$exports = $7262133281c40437$var$baseIsMap;\n\n\n\nvar $91Qdd = parcelRequire(\"91Qdd\");\n\nvar $jIny1 = parcelRequire(\"jIny1\");\n/* Node.js helper references. */ var $abac330771f68232$var$nodeIsMap = $jIny1 && $jIny1.isMap;\n/**\n * Checks if `value` is classified as a `Map` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n * @example\n *\n * _.isMap(new Map);\n * // => true\n *\n * _.isMap(new WeakMap);\n * // => false\n */ var $abac330771f68232$var$isMap = $abac330771f68232$var$nodeIsMap ? $91Qdd($abac330771f68232$var$nodeIsMap) : $7262133281c40437$exports;\n$abac330771f68232$exports = $abac330771f68232$var$isMap;\n\n\n\nvar $lsJ54 = parcelRequire(\"lsJ54\");\nvar $e8d4e2fa1f2b8f08$exports = {};\nvar $aad482e59457493b$exports = {};\n\nvar $67A6V = parcelRequire(\"67A6V\");\n\nvar $8l89S = parcelRequire(\"8l89S\");\n/** `Object#toString` result references. */ var $aad482e59457493b$var$setTag = \"[object Set]\";\n/**\n * The base implementation of `_.isSet` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n */ function $aad482e59457493b$var$baseIsSet(value) {\n    return $8l89S(value) && $67A6V(value) == $aad482e59457493b$var$setTag;\n}\n$aad482e59457493b$exports = $aad482e59457493b$var$baseIsSet;\n\n\n\nvar $91Qdd = parcelRequire(\"91Qdd\");\n\nvar $jIny1 = parcelRequire(\"jIny1\");\n/* Node.js helper references. */ var $e8d4e2fa1f2b8f08$var$nodeIsSet = $jIny1 && $jIny1.isSet;\n/**\n * Checks if `value` is classified as a `Set` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n * @example\n *\n * _.isSet(new Set);\n * // => true\n *\n * _.isSet(new WeakSet);\n * // => false\n */ var $e8d4e2fa1f2b8f08$var$isSet = $e8d4e2fa1f2b8f08$var$nodeIsSet ? $91Qdd($e8d4e2fa1f2b8f08$var$nodeIsSet) : $aad482e59457493b$exports;\n$e8d4e2fa1f2b8f08$exports = $e8d4e2fa1f2b8f08$var$isSet;\n\n\n\nvar $LAMcS = parcelRequire(\"LAMcS\");\n\nvar $f4lqP = parcelRequire(\"f4lqP\");\n/** Used to compose bitmasks for cloning. */ var $ee040e257a097984$var$CLONE_DEEP_FLAG = 1, $ee040e257a097984$var$CLONE_FLAT_FLAG = 2, $ee040e257a097984$var$CLONE_SYMBOLS_FLAG = 4;\n/** `Object#toString` result references. */ var $ee040e257a097984$var$argsTag = \"[object Arguments]\", $ee040e257a097984$var$arrayTag = \"[object Array]\", $ee040e257a097984$var$boolTag = \"[object Boolean]\", $ee040e257a097984$var$dateTag = \"[object Date]\", $ee040e257a097984$var$errorTag = \"[object Error]\", $ee040e257a097984$var$funcTag = \"[object Function]\", $ee040e257a097984$var$genTag = \"[object GeneratorFunction]\", $ee040e257a097984$var$mapTag = \"[object Map]\", $ee040e257a097984$var$numberTag = \"[object Number]\", $ee040e257a097984$var$objectTag = \"[object Object]\", $ee040e257a097984$var$regexpTag = \"[object RegExp]\", $ee040e257a097984$var$setTag = \"[object Set]\", $ee040e257a097984$var$stringTag = \"[object String]\", $ee040e257a097984$var$symbolTag = \"[object Symbol]\", $ee040e257a097984$var$weakMapTag = \"[object WeakMap]\";\nvar $ee040e257a097984$var$arrayBufferTag = \"[object ArrayBuffer]\", $ee040e257a097984$var$dataViewTag = \"[object DataView]\", $ee040e257a097984$var$float32Tag = \"[object Float32Array]\", $ee040e257a097984$var$float64Tag = \"[object Float64Array]\", $ee040e257a097984$var$int8Tag = \"[object Int8Array]\", $ee040e257a097984$var$int16Tag = \"[object Int16Array]\", $ee040e257a097984$var$int32Tag = \"[object Int32Array]\", $ee040e257a097984$var$uint8Tag = \"[object Uint8Array]\", $ee040e257a097984$var$uint8ClampedTag = \"[object Uint8ClampedArray]\", $ee040e257a097984$var$uint16Tag = \"[object Uint16Array]\", $ee040e257a097984$var$uint32Tag = \"[object Uint32Array]\";\n/** Used to identify `toStringTag` values supported by `_.clone`. */ var $ee040e257a097984$var$cloneableTags = {};\n$ee040e257a097984$var$cloneableTags[$ee040e257a097984$var$argsTag] = $ee040e257a097984$var$cloneableTags[$ee040e257a097984$var$arrayTag] = $ee040e257a097984$var$cloneableTags[$ee040e257a097984$var$arrayBufferTag] = $ee040e257a097984$var$cloneableTags[$ee040e257a097984$var$dataViewTag] = $ee040e257a097984$var$cloneableTags[$ee040e257a097984$var$boolTag] = $ee040e257a097984$var$cloneableTags[$ee040e257a097984$var$dateTag] = $ee040e257a097984$var$cloneableTags[$ee040e257a097984$var$float32Tag] = $ee040e257a097984$var$cloneableTags[$ee040e257a097984$var$float64Tag] = $ee040e257a097984$var$cloneableTags[$ee040e257a097984$var$int8Tag] = $ee040e257a097984$var$cloneableTags[$ee040e257a097984$var$int16Tag] = $ee040e257a097984$var$cloneableTags[$ee040e257a097984$var$int32Tag] = $ee040e257a097984$var$cloneableTags[$ee040e257a097984$var$mapTag] = $ee040e257a097984$var$cloneableTags[$ee040e257a097984$var$numberTag] = $ee040e257a097984$var$cloneableTags[$ee040e257a097984$var$objectTag] = $ee040e257a097984$var$cloneableTags[$ee040e257a097984$var$regexpTag] = $ee040e257a097984$var$cloneableTags[$ee040e257a097984$var$setTag] = $ee040e257a097984$var$cloneableTags[$ee040e257a097984$var$stringTag] = $ee040e257a097984$var$cloneableTags[$ee040e257a097984$var$symbolTag] = $ee040e257a097984$var$cloneableTags[$ee040e257a097984$var$uint8Tag] = $ee040e257a097984$var$cloneableTags[$ee040e257a097984$var$uint8ClampedTag] = $ee040e257a097984$var$cloneableTags[$ee040e257a097984$var$uint16Tag] = $ee040e257a097984$var$cloneableTags[$ee040e257a097984$var$uint32Tag] = true;\n$ee040e257a097984$var$cloneableTags[$ee040e257a097984$var$errorTag] = $ee040e257a097984$var$cloneableTags[$ee040e257a097984$var$funcTag] = $ee040e257a097984$var$cloneableTags[$ee040e257a097984$var$weakMapTag] = false;\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Deep clone\n *  2 - Flatten inherited properties\n *  4 - Clone symbols\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */ function $ee040e257a097984$var$baseClone(value, bitmask, customizer, key, object, stack) {\n    var result, isDeep = bitmask & $ee040e257a097984$var$CLONE_DEEP_FLAG, isFlat = bitmask & $ee040e257a097984$var$CLONE_FLAT_FLAG, isFull = bitmask & $ee040e257a097984$var$CLONE_SYMBOLS_FLAG;\n    if (customizer) result = object ? customizer(value, key, object, stack) : customizer(value);\n    if (result !== undefined) return result;\n    if (!$lsJ54(value)) return value;\n    var isArr = $o8HxT(value);\n    if (isArr) {\n        result = $392dfd68f4953502$exports(value);\n        if (!isDeep) return $aA0pv(value, result);\n    } else {\n        var tag = $67A6V(value), isFunc = tag == $ee040e257a097984$var$funcTag || tag == $ee040e257a097984$var$genTag;\n        if ($f504n(value)) return $uQ1Em(value, isDeep);\n        if (tag == $ee040e257a097984$var$objectTag || tag == $ee040e257a097984$var$argsTag || isFunc && !object) {\n            result = isFlat || isFunc ? {} : $dFJsF(value);\n            if (!isDeep) return isFlat ? $55e06195de8b50ba$exports(value, $0e266213253a5976$exports(result, value)) : $ce60b583e6a24a63$exports(value, $0b43ef5c64ba7f70$exports(result, value));\n        } else {\n            if (!$ee040e257a097984$var$cloneableTags[tag]) return object ? value : {};\n            result = $85aa01d56b12d536$exports(value, tag, isDeep);\n        }\n    }\n    // Check for circular references and return its corresponding clone.\n    stack || (stack = new $g779E);\n    var stacked = stack.get(value);\n    if (stacked) return stacked;\n    stack.set(value, result);\n    if ($e8d4e2fa1f2b8f08$exports(value)) value.forEach(function(subValue) {\n        result.add($ee040e257a097984$var$baseClone(subValue, bitmask, customizer, subValue, value, stack));\n    });\n    else if ($abac330771f68232$exports(value)) value.forEach(function(subValue, key) {\n        result.set(key, $ee040e257a097984$var$baseClone(subValue, bitmask, customizer, key, value, stack));\n    });\n    var keysFunc = isFull ? isFlat ? $d1b85174ea17081a$exports : $apVCl : isFlat ? $f4lqP : $LAMcS;\n    var props = isArr ? undefined : keysFunc(value);\n    $88035f224ff89479$exports(props || value, function(subValue, key) {\n        if (props) {\n            key = subValue;\n            subValue = value[key];\n        }\n        // Recursively populate clone (susceptible to call stack limits).\n        $5i71d(result, key, $ee040e257a097984$var$baseClone(subValue, bitmask, customizer, key, value, stack));\n    });\n    return result;\n}\n$ee040e257a097984$exports = $ee040e257a097984$var$baseClone;\n\n\n/** Used to compose bitmasks for cloning. */ var $d9b513d63d79678d$var$CLONE_DEEP_FLAG = 1, $d9b513d63d79678d$var$CLONE_SYMBOLS_FLAG = 4;\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */ function $d9b513d63d79678d$var$cloneDeep(value) {\n    return $ee040e257a097984$exports(value, $d9b513d63d79678d$var$CLONE_DEEP_FLAG | $d9b513d63d79678d$var$CLONE_SYMBOLS_FLAG);\n}\n$d9b513d63d79678d$exports = $d9b513d63d79678d$var$cloneDeep;\n\n\n\nvar $acw62 = parcelRequire(\"acw62\");\n\nvar $aRPiL = parcelRequire(\"aRPiL\");\n\nvar $izgog = parcelRequire(\"izgog\");\n\nvar $ayMG0 = parcelRequire(\"ayMG0\");\n\nvar $acw62 = parcelRequire(\"acw62\");\n\nvar $izgog = parcelRequire(\"izgog\");\n\nvar $6naUs = parcelRequire(\"6naUs\");\n\nvar $ayMG0 = parcelRequire(\"ayMG0\");\n\nvar $acw62 = parcelRequire(\"acw62\");\n\nvar $iGgHx = parcelRequire(\"iGgHx\");\nfunction $d3f2d60ec9a53303$export$f5b8910cec6cf069({ callback: callback, defaultValue: defaultValue, disabled: disabled = false, label: label, largeLetterSpacing: largeLetterSpacing, max: max, min: min, required: required = false, type: type }) {\n    const className = \"input\";\n    const classNames = [\n        className\n    ];\n    if (largeLetterSpacing) classNames.push(`${className}--large-letter-spacing`);\n    const [value, setValue] = (0, $acw62.useState)(defaultValue !== null && defaultValue !== undefined ? defaultValue : \"\");\n    // Create unique id for the input\n    const inputId = `input-${(0, $iGgHx.getRandomInteger)(100000, 999999)}`;\n    (0, $acw62.useEffect)(()=>{\n        // Update default value it changes\n        setValue(defaultValue !== null && defaultValue !== undefined ? defaultValue : \"\");\n    }, [\n        defaultValue\n    ]);\n    function changeHandler(event) {\n        const value = event.target.value;\n        setValue(value);\n        if (callback) callback(value);\n    }\n    function blurHandler(event) {\n        const trimmedValue = event.target.value.trim();\n        setValue(trimmedValue);\n        if (callback) callback(trimmedValue);\n    }\n    return /*#__PURE__*/ (0, $ayMG0.jsxs)(\"div\", {\n        className: classNames.join(\" \"),\n        children: [\n            /*#__PURE__*/ (0, $ayMG0.jsxs)(\"label\", {\n                className: `${className}__label`,\n                htmlFor: inputId,\n                children: [\n                    label,\n                    \" \",\n                    required && /*#__PURE__*/ (0, $ayMG0.jsx)(\"span\", {\n                        className: `${className}__required`,\n                        children: \"*\"\n                    })\n                ]\n            }),\n            /*#__PURE__*/ (0, $ayMG0.jsx)(\"input\", {\n                className: `${className}__input`,\n                disabled: disabled,\n                id: inputId,\n                max: max,\n                min: min,\n                onBlur: blurHandler,\n                onChange: changeHandler,\n                type: type,\n                required: required,\n                value: value\n            })\n        ]\n    });\n}\n\n\n\nvar $bO1fg = parcelRequire(\"bO1fg\");\n\nvar $6UJSz = parcelRequire(\"6UJSz\");\n\nvar $iGgHx = parcelRequire(\"iGgHx\");\n\nvar $avait = parcelRequire(\"avait\");\nfunction $5dcd0673c9efb9c7$export$a9bdc75bef574af8({ addSolution: addSolution, duplicateCase: duplicateCase, moveCase: moveCase, openPreviewModal: openPreviewModal, puzzlePreviewHash: puzzlePreviewHash, removeCase: removeCase, removeSolution: removeSolution, setTrainer: setTrainer, trainer: trainer, trainerCaseId: trainerCaseId, trainerSetId: trainerSetId }) {\n    const className = \"editor-case\";\n    const numberOfCases = (0, $iGgHx.getCasesFromSet)(trainer, trainerSetId).length;\n    const trainerCase = trainer.cases[trainerCaseId];\n    const numberOfSolutions = trainerCase.solutions?.length || 0;\n    if (!trainerCase) return;\n    function moveSolution(currentIndex, newIndex) {\n        if (!trainerCase.solutions || numberOfSolutions <= 1) return;\n        const solutionToMove = trainerCase.solutions[currentIndex];\n        const newSolutions = trainerCase.solutions;\n        newSolutions.splice(currentIndex, 1);\n        if (newIndex < 0) newSolutions.push(solutionToMove);\n        else if (newIndex > numberOfSolutions - 1) newSolutions.unshift(solutionToMove);\n        else newSolutions.splice(newIndex, 0, solutionToMove);\n        setTrainer({\n            ...trainer,\n            cases: {\n                ...trainer.cases,\n                [trainerCaseId]: {\n                    ...trainer.cases[trainerCaseId],\n                    solutions: newSolutions\n                }\n            }\n        });\n    }\n    function renderInfo() {\n        return /*#__PURE__*/ (0, $ayMG0.jsxs)((0, $6naUs.Group), {\n            title: \"Info\",\n            children: [\n                /*#__PURE__*/ (0, $ayMG0.jsxs)(\"ul\", {\n                    className: `${className}__input-list`,\n                    children: [\n                        /*#__PURE__*/ (0, $ayMG0.jsx)(\"li\", {\n                            className: `${className}__id`,\n                            children: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $d3f2d60ec9a53303$export$f5b8910cec6cf069), {\n                                defaultValue: trainerCase.id,\n                                disabled: true,\n                                label: \"Id\",\n                                required: true,\n                                type: \"text\"\n                            })\n                        }),\n                        /*#__PURE__*/ (0, $ayMG0.jsx)(\"li\", {\n                            className: `${className}__name`,\n                            children: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $d3f2d60ec9a53303$export$f5b8910cec6cf069), {\n                                callback: (value)=>{\n                                    setTrainer({\n                                        ...trainer,\n                                        cases: {\n                                            ...trainer.cases,\n                                            [trainerCaseId]: {\n                                                ...trainer.cases[trainerCaseId],\n                                                name: value\n                                            }\n                                        }\n                                    });\n                                },\n                                defaultValue: trainerCase.name,\n                                label: \"Name\",\n                                required: true,\n                                type: \"text\"\n                            })\n                        }),\n                        /*#__PURE__*/ (0, $ayMG0.jsx)(\"li\", {\n                            className: `${className}__position`,\n                            children: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $d3f2d60ec9a53303$export$f5b8910cec6cf069), {\n                                callback: (value)=>{\n                                    moveCase(trainerCaseId, parseInt(value));\n                                },\n                                defaultValue: trainerCase.position.toString(),\n                                label: \"Position\",\n                                max: numberOfCases - 1,\n                                min: 0,\n                                required: true,\n                                type: \"number\"\n                            })\n                        })\n                    ]\n                }),\n                /*#__PURE__*/ (0, $ayMG0.jsxs)((0, $bO1fg.List), {\n                    children: [\n                        /*#__PURE__*/ (0, $ayMG0.jsx)((0, $izgog.Button), {\n                            callback: ()=>duplicateCase(trainerCaseId),\n                            label: \"Duplicate Case\",\n                            iconName: \"plus-square-double\"\n                        }),\n                        /*#__PURE__*/ (0, $ayMG0.jsx)((0, $izgog.Button), {\n                            callback: ()=>removeCase(trainerCaseId),\n                            color: \"red\",\n                            label: \"Remove Case\",\n                            iconName: \"trash\"\n                        })\n                    ]\n                })\n            ]\n        });\n    }\n    function renderPreview() {\n        const source = (0, $iGgHx.getCaseImageSource)(trainer.puzzleName, trainer.id, trainerCaseId);\n        return /*#__PURE__*/ (0, $ayMG0.jsxs)((0, $6naUs.Group), {\n            alignment: \"center\",\n            title: \"Preview\",\n            children: [\n                /*#__PURE__*/ (0, $ayMG0.jsx)(\"div\", {\n                    className: `${className}__puzzle-preview`,\n                    children: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $avait.PuzzlePreview), {\n                        cacheRequests: false,\n                        source: source\n                    }, puzzlePreviewHash)\n                }),\n                /*#__PURE__*/ (0, $ayMG0.jsx)((0, $izgog.Button), {\n                    callback: openPreviewModal,\n                    iconName: \"paint-bucket-drip\",\n                    label: \"Edit Preview\"\n                })\n            ]\n        });\n    }\n    function renderSetup() {\n        return /*#__PURE__*/ (0, $ayMG0.jsx)((0, $6naUs.Group), {\n            title: \"Setup\",\n            children: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $d3f2d60ec9a53303$export$f5b8910cec6cf069), {\n                callback: (value)=>{\n                    setTrainer({\n                        ...trainer,\n                        cases: {\n                            ...trainer.cases,\n                            [trainerCaseId]: {\n                                ...trainer.cases[trainerCaseId],\n                                setup: value\n                            }\n                        }\n                    });\n                },\n                defaultValue: trainerCase.setup || \"\",\n                label: \"Setup\",\n                largeLetterSpacing: true,\n                type: \"text\"\n            })\n        });\n    }\n    function renderSolutions() {\n        return /*#__PURE__*/ (0, $ayMG0.jsxs)((0, $6naUs.Group), {\n            title: `Solutions (${numberOfSolutions})`,\n            children: [\n                /*#__PURE__*/ (0, $ayMG0.jsx)(\"div\", {\n                    children: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $izgog.Button), {\n                        callback: ()=>addSolution(trainerCaseId),\n                        iconName: \"plus-square\",\n                        label: \"Add Solution\"\n                    })\n                }),\n                trainerCase.solutions && trainerCase.solutions.length > 0 && /*#__PURE__*/ (0, $ayMG0.jsx)(\"ul\", {\n                    className: `${className}__solutions`,\n                    children: trainerCase.solutions.map((solution, index)=>{\n                        return /*#__PURE__*/ (0, $ayMG0.jsxs)((0, $acw62.Fragment), {\n                            children: [\n                                renderSolution(solution, index),\n                                index < numberOfSolutions - 1 && /*#__PURE__*/ (0, $ayMG0.jsx)((0, $6UJSz.Separator), {})\n                            ]\n                        }, `solution-${index}`);\n                    })\n                })\n            ]\n        });\n    }\n    function renderSolution(solution, index) {\n        return /*#__PURE__*/ (0, $ayMG0.jsxs)(\"li\", {\n            className: `${className}__solution`,\n            children: [\n                /*#__PURE__*/ (0, $ayMG0.jsx)((0, $d3f2d60ec9a53303$export$f5b8910cec6cf069), {\n                    callback: (value)=>{\n                        const newSolutions = trainer.cases[trainerCaseId].solutions || [];\n                        newSolutions[index] = value;\n                        setTrainer({\n                            ...trainer,\n                            cases: {\n                                ...trainer.cases,\n                                [trainerCaseId]: {\n                                    ...trainer.cases[trainerCaseId],\n                                    solutions: newSolutions\n                                }\n                            }\n                        });\n                    },\n                    defaultValue: solution,\n                    label: `Solution ${index + 1}`,\n                    largeLetterSpacing: true,\n                    required: true,\n                    type: \"text\"\n                }),\n                /*#__PURE__*/ (0, $ayMG0.jsxs)((0, $bO1fg.List), {\n                    children: [\n                        numberOfSolutions > 1 && /*#__PURE__*/ (0, $ayMG0.jsx)((0, $izgog.Button), {\n                            callback: ()=>moveSolution(index, index - 1),\n                            iconName: \"arrow-up\",\n                            tooltip: \"Move solution up\"\n                        }),\n                        numberOfSolutions > 1 && /*#__PURE__*/ (0, $ayMG0.jsx)((0, $izgog.Button), {\n                            callback: ()=>moveSolution(index, index + 1),\n                            iconName: \"arrow-down\",\n                            tooltip: \"Move solution down\"\n                        }),\n                        /*#__PURE__*/ (0, $ayMG0.jsx)((0, $izgog.Button), {\n                            callback: ()=>removeSolution(trainerCaseId, index),\n                            color: \"red\",\n                            iconName: \"trash\",\n                            label: \"Remove Solution\"\n                        })\n                    ]\n                })\n            ]\n        });\n    }\n    return /*#__PURE__*/ (0, $ayMG0.jsxs)(\"div\", {\n        className: className,\n        children: [\n            renderInfo(),\n            /*#__PURE__*/ (0, $ayMG0.jsxs)(\"div\", {\n                className: `${className}__columns`,\n                children: [\n                    /*#__PURE__*/ (0, $ayMG0.jsx)(\"div\", {\n                        className: `${className}__column`,\n                        children: renderPreview()\n                    }),\n                    /*#__PURE__*/ (0, $ayMG0.jsxs)(\"div\", {\n                        className: `${className}__column`,\n                        children: [\n                            renderSetup(),\n                            renderSolutions()\n                        ]\n                    })\n                ]\n            })\n        ]\n    });\n}\n\n\n\nvar $ayMG0 = parcelRequire(\"ayMG0\");\n\nvar $acw62 = parcelRequire(\"acw62\");\n\nvar $ftrVQ = parcelRequire(\"ftrVQ\");\n\nvar $iGgHx = parcelRequire(\"iGgHx\");\n\nvar $izgog = parcelRequire(\"izgog\");\n\nvar $6naUs = parcelRequire(\"6naUs\");\n\nvar $bO1fg = parcelRequire(\"bO1fg\");\n\nvar $avait = parcelRequire(\"avait\");\nfunction $f48019685109d4e9$export$4dbcfed276ad8cd8({ trainer: trainer, trainerCaseId: trainerCaseId }) {\n    const className = \"editor-preview\";\n    const [activeColorName, setActiveColorName] = (0, $acw62.useState)(\"--color-ignore\");\n    const [puzzlePreviewHash, setPuzzlePreviewHash] = (0, $acw62.useState)(Math.random().toString());\n    const [source, setSource] = (0, $acw62.useState)((0, $iGgHx.getCaseImageSource)(trainer.puzzleName, trainer.id, trainerCaseId));\n    const [svgRef, setSvgRef] = (0, $acw62.useState)();\n    const colorScheme = (0, $ftrVQ.storeManager).getColorScheme(trainer.puzzleName);\n    function puzzlePreviewLoadHandler(svgRef) {\n        if (!svgRef) throw new Error(\"Missing SVG reference.\");\n        setSvgRef(svgRef);\n    }\n    function puzzlePreviewErrorHandler() {\n        // Use the default image if the case's image doesn't load\n        setSource(`/assets/images/puzzles/${trainer.puzzleName}/${trainer.puzzleImage}.svg`);\n    }\n    function puzzleClickHandler(event) {\n        if (event.target.tagName === \"path\") // Set fill property on the path that was clicked\n        event.target.setAttribute(\"style\", `fill: var(${activeColorName})`);\n    }\n    function downloadButtonClickHandler() {\n        if (svgRef && svgRef.current) {\n            // Create a file containing the SVG\n            const fileContent = svgRef.current.outerHTML;\n            const file = new Blob([\n                fileContent\n            ], {\n                type: \"image/svg+xml\"\n            });\n            // Create a link to download teh file\n            const linkElement = document.createElement(\"a\");\n            linkElement.href = URL.createObjectURL(file);\n            linkElement.download = `${trainerCaseId}.svg`;\n            // Programatically click the link\n            linkElement.click();\n        }\n    }\n    function resetPuzzle() {\n        setSource(`/assets/images/puzzles/${trainer.puzzleName}/${trainer.puzzleImage}.svg`);\n        setPuzzlePreviewHash(Math.random().toString());\n    }\n    function emptyPuzzle() {\n        if (!svgRef?.current) return;\n        const pathElements = svgRef.current.querySelectorAll(\"path\");\n        pathElements.forEach((pathElement)=>{\n            pathElement.setAttribute(\"style\", \"fill: var(--color-ignore)\");\n        });\n    }\n    function renderPuzzlePreview() {\n        return /*#__PURE__*/ (0, $ayMG0.jsx)((0, $6naUs.Group), {\n            alignment: \"center\",\n            title: \"Puzzle\",\n            children: /*#__PURE__*/ (0, $ayMG0.jsx)(\"div\", {\n                className: `${className}__puzzle-preview`,\n                onClick: (event)=>puzzleClickHandler(event),\n                \"data-tooltip\": \"Assign color\",\n                \"data-tooltip-position\": \"center\",\n                children: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $avait.PuzzlePreview), {\n                    cacheRequests: false,\n                    hash: puzzlePreviewHash,\n                    onErrorCallback: puzzlePreviewErrorHandler,\n                    onLoadCallback: puzzlePreviewLoadHandler,\n                    source: source\n                })\n            })\n        });\n    }\n    function renderColorPalette() {\n        return /*#__PURE__*/ (0, $ayMG0.jsx)((0, $6naUs.Group), {\n            alignment: \"center\",\n            title: \"Color Palette\",\n            children: /*#__PURE__*/ (0, $ayMG0.jsxs)(\"ul\", {\n                className: `${className}__list`,\n                children: [\n                    /*#__PURE__*/ (0, $ayMG0.jsx)(\"li\", {\n                        className: `${className}__item`,\n                        children: renderColor(\"--color-ignore\")\n                    }),\n                    Object.keys(colorScheme).map((colorName)=>/*#__PURE__*/ (0, $ayMG0.jsx)(\"li\", {\n                            className: `${className}__item`,\n                            children: renderColor(colorName)\n                        }, `item-${colorName}`))\n                ]\n            })\n        });\n    }\n    function renderColor(colorName) {\n        if (!colorName) throw new Error(\"Missing color name.\");\n        return /*#__PURE__*/ (0, $ayMG0.jsx)(\"button\", {\n            \"aria-selected\": colorName === activeColorName,\n            className: `${className}__color`,\n            onClick: ()=>setActiveColorName(colorName),\n            style: {\n                backgroundColor: `var(${colorName})`\n            },\n            \"data-tooltip\": \"Pick color\",\n            \"data-tooltip-position\": \"center\",\n            type: \"button\"\n        });\n    }\n    function renderActions() {\n        return /*#__PURE__*/ (0, $ayMG0.jsx)((0, $6naUs.Group), {\n            title: \"Actions\",\n            children: /*#__PURE__*/ (0, $ayMG0.jsxs)((0, $bO1fg.List), {\n                marginLeftIndex: 2,\n                children: [\n                    /*#__PURE__*/ (0, $ayMG0.jsx)((0, $izgog.Button), {\n                        callback: resetPuzzle,\n                        color: \"red\",\n                        iconName: \"arrow-counter-clockwise\",\n                        label: \"Reset Puzzle\"\n                    }),\n                    /*#__PURE__*/ (0, $ayMG0.jsx)((0, $izgog.Button), {\n                        callback: emptyPuzzle,\n                        iconName: \"broom\",\n                        label: \"Empty Puzzle\"\n                    }),\n                    /*#__PURE__*/ (0, $ayMG0.jsx)((0, $izgog.Button), {\n                        callback: downloadButtonClickHandler,\n                        iconName: \"arrow-half-square-down\",\n                        label: \"Download Image\"\n                    })\n                ]\n            })\n        });\n    }\n    return /*#__PURE__*/ (0, $ayMG0.jsxs)(\"div\", {\n        className: className,\n        children: [\n            renderPuzzlePreview(),\n            renderColorPalette(),\n            renderActions()\n        ]\n    });\n}\n\n\n\nvar $ayMG0 = parcelRequire(\"ayMG0\");\nparcelRequire(\"acw62\");\n\nvar $izgog = parcelRequire(\"izgog\");\n\nvar $6naUs = parcelRequire(\"6naUs\");\n\n\nvar $bO1fg = parcelRequire(\"bO1fg\");\n\nvar $iGgHx = parcelRequire(\"iGgHx\");\n\nvar $d4TLH = parcelRequire(\"d4TLH\");\nfunction $b4f3609a99daaab4$export$72aaff55e29e5d8c({ addCase: addCase, duplicateSet: duplicateSet, moveSet: moveSet, openCaseModal: openCaseModal, puzzlePreviewHash: puzzlePreviewHash, removeSet: removeSet, setTrainer: setTrainer, trainer: trainer, trainerSetId: trainerSetId }) {\n    const className = \"editor-set\";\n    const numberOfSets = (0, $iGgHx.getSets)(trainer).length;\n    const trainerSet = trainer.sets[trainerSetId];\n    const setCases = (0, $iGgHx.getCasesFromSet)(trainer, trainerSetId);\n    function renderInfo() {\n        return /*#__PURE__*/ (0, $ayMG0.jsxs)((0, $6naUs.Group), {\n            title: \"Info\",\n            children: [\n                /*#__PURE__*/ (0, $ayMG0.jsxs)(\"ul\", {\n                    className: `${className}__input-list`,\n                    children: [\n                        /*#__PURE__*/ (0, $ayMG0.jsx)(\"li\", {\n                            className: `${className}__id`,\n                            children: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $d3f2d60ec9a53303$export$f5b8910cec6cf069), {\n                                defaultValue: trainerSet.id,\n                                disabled: true,\n                                label: \"Id\",\n                                required: true,\n                                type: \"text\"\n                            })\n                        }),\n                        /*#__PURE__*/ (0, $ayMG0.jsx)(\"li\", {\n                            className: `${className}__name`,\n                            children: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $d3f2d60ec9a53303$export$f5b8910cec6cf069), {\n                                callback: (value)=>{\n                                    setTrainer({\n                                        ...trainer,\n                                        sets: {\n                                            ...trainer.sets,\n                                            [trainerSetId]: {\n                                                ...trainer.sets[trainerSetId],\n                                                name: value\n                                            }\n                                        }\n                                    });\n                                },\n                                defaultValue: trainerSet.name,\n                                label: \"Name\",\n                                required: true,\n                                type: \"text\"\n                            })\n                        }),\n                        /*#__PURE__*/ (0, $ayMG0.jsx)(\"li\", {\n                            className: `${className}__position`,\n                            children: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $d3f2d60ec9a53303$export$f5b8910cec6cf069), {\n                                callback: (value)=>{\n                                    moveSet(trainerSetId, parseInt(value));\n                                },\n                                defaultValue: trainerSet.position.toString(),\n                                label: \"Position\",\n                                max: numberOfSets - 1,\n                                min: 0,\n                                required: true,\n                                type: \"number\"\n                            })\n                        })\n                    ]\n                }),\n                /*#__PURE__*/ (0, $ayMG0.jsxs)((0, $bO1fg.List), {\n                    children: [\n                        /*#__PURE__*/ (0, $ayMG0.jsx)((0, $izgog.Button), {\n                            callback: ()=>duplicateSet(trainerSetId),\n                            label: \"Duplicate Set\",\n                            iconName: \"plus-square-double\"\n                        }),\n                        /*#__PURE__*/ (0, $ayMG0.jsx)((0, $izgog.Button), {\n                            callback: ()=>removeSet(trainerSetId),\n                            color: \"red\",\n                            label: \"Remove Set\",\n                            iconName: \"trash\"\n                        })\n                    ]\n                })\n            ]\n        });\n    }\n    function renderCases() {\n        return /*#__PURE__*/ (0, $ayMG0.jsxs)((0, $6naUs.Group), {\n            alignment: \"left\",\n            title: `Cases (${setCases.length})`,\n            children: [\n                /*#__PURE__*/ (0, $ayMG0.jsx)((0, $izgog.Button), {\n                    callback: ()=>addCase(trainerSetId),\n                    iconName: \"plus-square\",\n                    label: \"Add Case\"\n                }),\n                setCases.length > 0 && /*#__PURE__*/ (0, $ayMG0.jsx)(\"ul\", {\n                    className: `${className}__cases`,\n                    children: setCases.map((setCase)=>/*#__PURE__*/ (0, $ayMG0.jsx)(\"li\", {\n                            className: `${className}__case`,\n                            children: renderCase(setCase)\n                        }, `case-${setCase.id}`))\n                })\n            ]\n        });\n    }\n    function renderCase(trainerCase) {\n        if (!trainerCase) return null;\n        return /*#__PURE__*/ (0, $ayMG0.jsx)((0, $d4TLH.CasePreview), {\n            cacheRequests: false,\n            callback: ()=>openCaseModal(trainerCase.id),\n            name: trainerCase.name,\n            position: trainerCase.position,\n            puzzlePreviewHash: puzzlePreviewHash,\n            source: (0, $iGgHx.getCaseImageSource)(trainer.puzzleName, trainer.id, trainerCase.id),\n            tooltip: \"Edit case\"\n        });\n    }\n    return /*#__PURE__*/ (0, $ayMG0.jsxs)(\"div\", {\n        className: className,\n        children: [\n            renderInfo(),\n            renderCases()\n        ]\n    });\n}\n\n\n\nvar $AUWqP = parcelRequire(\"AUWqP\");\n\nvar $6naUs = parcelRequire(\"6naUs\");\n\n\nvar $bO1fg = parcelRequire(\"bO1fg\");\n\nvar $ayMG0 = parcelRequire(\"ayMG0\");\n\nvar $acw62 = parcelRequire(\"acw62\");\n\nvar $k2p8j = parcelRequire(\"k2p8j\");\n\nvar $cZKrT = parcelRequire(\"cZKrT\");\n\nvar $iGgHx = parcelRequire(\"iGgHx\");\nfunction $e2b3f2946effb7d0$export$2b77a92f1a5ad772({ children: children, closeCallback: closeCallback, open: open = false, title: title }) {\n    const className = \"modal\";\n    const classNames = [\n        className\n    ];\n    if (open) classNames.push(`${className}--open`);\n    const componentRef = (0, $acw62.useRef)(null);\n    const buttonCloseRef = (0, $acw62.useRef)(null);\n    (0, $cZKrT.useEventListener)(document, \"keydown\", keydownHandler);\n    (0, $acw62.useEffect)(()=>{\n        if (open) {\n            // Set focus on close button\n            buttonCloseRef.current?.focus();\n            // Trap focus\n            if (componentRef.current) (0, $iGgHx.trapFocus)(componentRef.current);\n        }\n    }, [\n        open\n    ]);\n    function keydownHandler(event) {\n        if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) return;\n        // Escape\n        if (event.code === \"Escape\") {\n            event.preventDefault();\n            close();\n        }\n    }\n    function close() {\n        if (open) closeCallback();\n    }\n    return open ? /*#__PURE__*/ (0, $ayMG0.jsx)(\"div\", {\n        \"aria-modal\": true,\n        className: classNames.join(\" \"),\n        inert: !open ? \"\" : null,\n        ref: componentRef,\n        role: \"dialog\",\n        children: /*#__PURE__*/ (0, $ayMG0.jsxs)(\"div\", {\n            className: `${className}__content`,\n            children: [\n                /*#__PURE__*/ (0, $ayMG0.jsx)(\"h1\", {\n                    className: `${className}__title`,\n                    children: title\n                }),\n                /*#__PURE__*/ (0, $ayMG0.jsx)(\"div\", {\n                    className: `${className}__header`,\n                    children: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $k2p8j.ButtonRound), {\n                        callback: close,\n                        iconName: \"x\",\n                        ref: buttonCloseRef,\n                        tooltip: \"Close modal (Escape)\",\n                        tooltipPosition: \"right\"\n                    })\n                }),\n                children\n            ]\n        })\n    }) : null;\n}\n\n\n\nvar $fcogW = parcelRequire(\"fcogW\");\n\nvar $ayMG0 = parcelRequire(\"ayMG0\");\n\nvar $acw62 = parcelRequire(\"acw62\");\n\nvar $iGgHx = parcelRequire(\"iGgHx\");\nfunction $e7904f39f9c0fb66$export$ef9b1a59e592288f({ callback: callback, defaultValue: defaultValue, label: label, options: options }) {\n    const className = \"select\";\n    const [value, setValue] = (0, $acw62.useState)(defaultValue);\n    // Create unique id for the select\n    const selectId = `select-${(0, $iGgHx.getRandomInteger)(100000, 999999)}`;\n    (0, $acw62.useEffect)(()=>{\n        // Set value to default value when options change\n        setValue(defaultValue);\n    }, [\n        options\n    ]);\n    function changeHandler(event) {\n        setValue(event.target.value);\n        callback(event.target.value);\n    }\n    return /*#__PURE__*/ (0, $ayMG0.jsxs)(\"div\", {\n        className: className,\n        children: [\n            /*#__PURE__*/ (0, $ayMG0.jsx)(\"label\", {\n                className: `${className}__label`,\n                htmlFor: selectId,\n                children: label\n            }),\n            /*#__PURE__*/ (0, $ayMG0.jsx)(\"select\", {\n                className: `${className}__select`,\n                id: selectId,\n                onChange: changeHandler,\n                value: value,\n                children: options.map((option, index)=>/*#__PURE__*/ (0, $ayMG0.jsx)(\"option\", {\n                        value: option.value,\n                        children: option.label\n                    }, `select-${selectId}-option-${index}`))\n            })\n        ]\n    });\n}\n\n\n\nvar $ayMG0 = parcelRequire(\"ayMG0\");\n\nvar $acw62 = parcelRequire(\"acw62\");\n\nvar $iGgHx = parcelRequire(\"iGgHx\");\nfunction $1870dbfc6a16a2d8$export$379139ebc1c2b235({ callback: callback, defaultValue: defaultValue, label: label, required: required = false }) {\n    const className = \"textarea\";\n    const [value, setValue] = (0, $acw62.useState)(defaultValue);\n    // Create unique id for the textarea\n    const textareaId = `textarea-${(0, $iGgHx.getRandomInteger)(100000, 999999)}`;\n    (0, $acw62.useEffect)(()=>{\n        // Update default value it changes\n        setValue(defaultValue);\n    }, [\n        defaultValue\n    ]);\n    function changeHandler(event) {\n        setValue(event.target.value);\n        callback(event.target.value);\n    }\n    return /*#__PURE__*/ (0, $ayMG0.jsxs)(\"div\", {\n        className: className,\n        children: [\n            /*#__PURE__*/ (0, $ayMG0.jsxs)(\"label\", {\n                className: `${className}__label`,\n                htmlFor: textareaId,\n                children: [\n                    label,\n                    \" \",\n                    required && /*#__PURE__*/ (0, $ayMG0.jsx)(\"span\", {\n                        className: `${className}__required`,\n                        children: \"*\"\n                    })\n                ]\n            }),\n            /*#__PURE__*/ (0, $ayMG0.jsx)(\"textarea\", {\n                className: `${className}__textarea`,\n                id: textareaId,\n                onChange: changeHandler,\n                required: required,\n                value: value\n            })\n        ]\n    });\n}\n\n\n\nvar $65UFG = parcelRequire(\"65UFG\");\n\nvar $ftrVQ = parcelRequire(\"ftrVQ\");\n\nvar $iGgHx = parcelRequire(\"iGgHx\");\nfunction $8068a1e5d9cb5eb6$var$Editor() {\n    const className = \"editor\";\n    const [trainer, setTrainer] = (0, $acw62.useState)({\n        id: \"example\",\n        name: \"Example\",\n        method: \"Other\",\n        puzzleName: \"3x3x3\",\n        puzzleImage: \"three-faces\",\n        version: 1,\n        authors: \"Author\",\n        description: \"Description.\",\n        sets: {\n            \"0\": {\n                id: \"0\",\n                position: 0,\n                name: \"Example Set\"\n            }\n        },\n        cases: {\n            \"0\": {\n                id: \"0\",\n                position: 0,\n                setId: \"0\",\n                name: \"Example Case\",\n                setup: `R U R' U'`,\n                solutions: [\n                    `U R U' R'`\n                ]\n            }\n        }\n    });\n    const [activeTrainerSetId, setActiveTrainerSetId] = (0, $acw62.useState)(\"0\");\n    const [activeTrainerCaseId, setActiveTrainerCaseId] = (0, $acw62.useState)(\"0\");\n    const [modalSetOpen, setModalSetOpen] = (0, $acw62.useState)(false);\n    const [modalCaseOpen, setModalCaseOpen] = (0, $acw62.useState)(false);\n    const [modalPreviewOpen, setModalPreviewOpen] = (0, $acw62.useState)(false);\n    const [puzzlePreviewHash, setPuzzlePreviewHash] = (0, $acw62.useState)(Math.random().toString());\n    document.title = \"SST - Editor\";\n    const trainerSets = (0, $iGgHx.getSets)(trainer);\n    const numberOfSets = trainerSets.length;\n    const numberOfSetsWithDeleted = (0, $iGgHx.getSets)(trainer, false).length;\n    const numberOfCasesWithDeleted = (0, $iGgHx.getCases)(trainer, false).length;\n    console.log(trainer);\n    (0, $acw62.useEffect)(()=>{\n        (0, $iGgHx.updateColorSchemeCustomProperties)((0, $ftrVQ.storeManager).getColorScheme(trainer.puzzleName));\n        // Ask confirmation before leaving\n        window.addEventListener(\"beforeunload\", (event)=>{\n            event.preventDefault();\n        });\n    }, []);\n    (0, $acw62.useEffect)(()=>{\n        (0, $iGgHx.updateColorSchemeCustomProperties)((0, $ftrVQ.storeManager).getColorScheme(trainer.puzzleName));\n    }, [\n        trainer.puzzleName\n    ]);\n    (0, $acw62.useEffect)(()=>{\n        if (modalSetOpen || modalCaseOpen) (0, $iGgHx.disableBodyScroll)();\n        if (!modalSetOpen && !modalCaseOpen) (0, $iGgHx.enableBodyScroll)();\n    }, [\n        modalSetOpen,\n        modalCaseOpen\n    ]);\n    function importTrainer() {\n        const confirm = window.confirm(\"Are you sure you want to import a trainer? This will overwrite the current data, it cannot be undone.\");\n        if (confirm) {\n            // Create an input upload the file\n            const inputElement = document.createElement(\"input\");\n            inputElement.type = \"file\";\n            // Add event listener to get the file\n            inputElement.addEventListener(\"change\", ()=>{\n                // Get file text\n                inputElement.files?.[0].text().then((text)=>{\n                    try {\n                        // Parse text\n                        const newTrainer = JSON.parse(text);\n                        // Update trainer\n                        setTrainer(newTrainer);\n                    } catch (error) {\n                        console.error(error);\n                        window.alert(\"Error: Corrupted trainer.\");\n                    }\n                });\n            });\n            // Programatically click the input\n            inputElement.click();\n        }\n    }\n    function exportTrainer() {\n        // Create a file containing the trainer\n        const fileContent = JSON.stringify(trainer);\n        const file = new Blob([\n            fileContent\n        ], {\n            type: \"application/json\"\n        });\n        // Create a link to download the file\n        const linkElement = document.createElement(\"a\");\n        linkElement.href = URL.createObjectURL(file);\n        linkElement.download = \"data.json\";\n        // Programatically click the link\n        linkElement.click();\n    }\n    function addSet() {\n        setTrainer({\n            ...trainer,\n            sets: {\n                ...trainer.sets,\n                [numberOfSetsWithDeleted]: {\n                    id: numberOfSetsWithDeleted.toString(),\n                    position: numberOfSets,\n                    name: \"New Set\"\n                }\n            }\n        });\n        setActiveTrainerSetId(numberOfSetsWithDeleted.toString());\n        setModalSetOpen(true);\n    }\n    function duplicateSet(setId) {\n        if (!setId) throw new Error(\"Missing set id.\");\n        const newCases = (0, (/*@__PURE__*/$parcel$interopDefault($d9b513d63d79678d$exports)))(trainer.cases);\n        const casesFromSet = (0, $iGgHx.getCasesFromSet)(trainer, setId);\n        casesFromSet.forEach((trainerCase, index)=>{\n            const newCase = (0, (/*@__PURE__*/$parcel$interopDefault($d9b513d63d79678d$exports)))(trainerCase);\n            newCase.id = (numberOfCasesWithDeleted + index).toString();\n            newCase.setId = numberOfSetsWithDeleted.toString();\n            newCase.name = `Copy of ${trainerCase.name}`;\n            newCases[numberOfCasesWithDeleted + index] = newCase;\n        });\n        setTrainer({\n            ...trainer,\n            sets: {\n                ...trainer.sets,\n                [numberOfSetsWithDeleted.toString()]: {\n                    ...trainer.sets[setId],\n                    id: numberOfSetsWithDeleted.toString(),\n                    position: numberOfSets,\n                    name: `Copy of ${trainer.sets[setId].name}`\n                }\n            },\n            cases: newCases\n        });\n        setActiveTrainerSetId(numberOfSetsWithDeleted.toString());\n    }\n    function removeSet(setId) {\n        if (!setId) throw new Error(\"Missing set id.\");\n        const confirm = window.confirm(`Are you sure you want to remove this set and all it's cases?`);\n        if (!confirm) return;\n        const newSets = (0, (/*@__PURE__*/$parcel$interopDefault($d9b513d63d79678d$exports)))(trainer.sets);\n        // Delete set\n        newSets[setId] = {\n            ...newSets[setId],\n            deleted: true\n        };\n        // Update position of sets\n        Object.keys(newSets).forEach((newSetId)=>{\n            // If set is not deleted and it's position is greater than the set to delete\n            if (!newSets[newSetId].deleted && newSets[newSetId].position > newSets[setId].position) newSets[newSetId].position--;\n        });\n        const newCases = (0, (/*@__PURE__*/$parcel$interopDefault($d9b513d63d79678d$exports)))(trainer.cases);\n        // Delete cases from set\n        Object.keys(newCases).forEach((newCaseId)=>{\n            // If case belongs to the set to delete\n            if (newCases[newCaseId].setId === setId) newCases[newCaseId] = {\n                ...newCases[newCaseId],\n                deleted: true\n            };\n        });\n        setModalSetOpen(false);\n        setTrainer({\n            ...trainer,\n            sets: newSets,\n            cases: newCases\n        });\n    }\n    function moveSet(setId, newPosition) {\n        if (!setId) throw new Error(\"Missing set id.\");\n        if (typeof newPosition !== \"number\") throw new Error(\"Missing new position.\");\n        const newSets = (0, (/*@__PURE__*/$parcel$interopDefault($d9b513d63d79678d$exports)))(trainer.sets);\n        const oldPosition = newSets[setId].position;\n        // If the position is decreasing\n        if (newPosition < trainer.sets[setId].position) // For each set\n        Object.keys(newSets).forEach((newSetId)=>{\n            // If the set is the one moving\n            if (newSetId === setId) newSets[newSetId].position = newPosition;\n            else if (newSets[newSetId].position >= newPosition && newSets[newSetId].position < oldPosition) newSets[newSetId].position++;\n        });\n        // If the position is increasing\n        if (newPosition > trainer.sets[setId].position) // For each set\n        Object.keys(newSets).forEach((newSetId)=>{\n            // If the set is the one moving\n            if (newSetId === setId) newSets[newSetId].position = newPosition;\n            else if (newSets[newSetId].position > oldPosition && newSets[newSetId].position <= newPosition) newSets[newSetId].position--;\n        });\n        setTrainer({\n            ...trainer,\n            sets: newSets\n        });\n    }\n    function addCase(setId) {\n        if (!setId) throw new Error(\"Missing set id.\");\n        const numberOfCasesInSet = (0, $iGgHx.getCasesFromSet)(trainer, setId).length;\n        setTrainer({\n            ...trainer,\n            cases: {\n                ...trainer.cases,\n                [numberOfCasesWithDeleted]: {\n                    id: numberOfCasesWithDeleted.toString(),\n                    position: numberOfCasesInSet,\n                    setId: setId,\n                    name: \"New Case\",\n                    solutions: [\n                        \"\"\n                    ]\n                }\n            }\n        });\n        setActiveTrainerCaseId(numberOfCasesWithDeleted.toString());\n        setModalCaseOpen(true);\n    }\n    function duplicateCase(caseId) {\n        if (!caseId) throw new Error(\"Missing case id.\");\n        const numberOfCasesInSet = (0, $iGgHx.getCasesFromSet)(trainer, trainer.cases[caseId].setId).length;\n        const newCase = (0, (/*@__PURE__*/$parcel$interopDefault($d9b513d63d79678d$exports)))(trainer.cases[caseId]);\n        newCase.id = numberOfCasesWithDeleted.toString();\n        newCase.position = numberOfCasesInSet;\n        newCase.name = `Copy of ${trainer.cases[caseId].name}`;\n        setTrainer({\n            ...trainer,\n            cases: {\n                ...trainer.cases,\n                [numberOfCasesWithDeleted]: newCase\n            }\n        });\n        setActiveTrainerCaseId(numberOfCasesWithDeleted.toString());\n    }\n    function removeCase(caseId) {\n        if (!caseId) throw new Error(\"Missing case id.\");\n        const confirm = window.confirm(\"Are you sure you want to remove this case?\");\n        if (!confirm) return;\n        const newCases = (0, (/*@__PURE__*/$parcel$interopDefault($d9b513d63d79678d$exports)))(trainer.cases);\n        // Delete case\n        newCases[caseId] = {\n            ...newCases[caseId],\n            deleted: true\n        };\n        // Update position of cases\n        Object.keys(newCases).forEach((newCaseId)=>{\n            // If case is not deleted and it's position is greater than the case to delete\n            if (!newCases[newCaseId].deleted && newCases[newCaseId].position > newCases[caseId].position) newCases[newCaseId].position--;\n        });\n        setModalCaseOpen(false);\n        setTrainer({\n            ...trainer,\n            cases: newCases\n        });\n    }\n    function moveCase(caseId, newPosition) {\n        if (!caseId) throw new Error(\"Missing case id.\");\n        if (typeof newPosition !== \"number\") throw new Error(\"Missing new position.\");\n        const newCases = (0, (/*@__PURE__*/$parcel$interopDefault($d9b513d63d79678d$exports)))(trainer.cases);\n        const setId = newCases[caseId].setId;\n        const oldPosition = newCases[caseId].position;\n        // If the position is decreasing\n        if (newPosition < trainer.cases[caseId].position) // For each case\n        Object.keys(newCases).forEach((newCaseId)=>{\n            if (newCases[newCaseId].setId !== setId) return;\n            // If the case is the one moving\n            if (newCaseId === caseId) newCases[newCaseId].position = newPosition;\n            else if (newCases[newCaseId].position >= newPosition && newCases[newCaseId].position < oldPosition) newCases[newCaseId].position++;\n        });\n        // If the position is increasing\n        if (newPosition > trainer.cases[caseId].position) // For each case\n        Object.keys(newCases).forEach((newCaseId)=>{\n            if (newCases[newCaseId].setId !== setId) return;\n            // If the case is the one moving\n            if (newCaseId === caseId) newCases[newCaseId].position = newPosition;\n            else if (newCases[newCaseId].position > oldPosition && newCases[newCaseId].position <= newPosition) newCases[newCaseId].position--;\n        });\n        setTrainer({\n            ...trainer,\n            cases: newCases\n        });\n    }\n    function addSolution(caseId) {\n        if (!caseId) throw new Error(\"Missing case id.\");\n        const newSolutions = trainer.cases[caseId].solutions || [];\n        newSolutions.push(\"\");\n        setTrainer({\n            ...trainer,\n            cases: {\n                ...trainer.cases,\n                [caseId]: {\n                    ...trainer.cases[caseId],\n                    solutions: newSolutions\n                }\n            }\n        });\n    }\n    function removeSolution(caseId, solutionIndex) {\n        if (!caseId) throw new Error(\"Missing case id.\");\n        if (typeof solutionIndex !== \"number\") throw new Error(\"Missing solution index.\");\n        const confirm = window.confirm(\"Are you sure you want to remove this solution?\");\n        if (!confirm) return;\n        const newSolutions = trainer.cases[caseId].solutions || [];\n        newSolutions.splice(solutionIndex, 1);\n        setTrainer({\n            ...trainer,\n            cases: {\n                ...trainer.cases,\n                [caseId]: {\n                    ...trainer.cases[caseId],\n                    solutions: newSolutions\n                }\n            }\n        });\n    }\n    function openSetModal(setId) {\n        if (!setId) throw new Error(\"Missing set id.\");\n        setActiveTrainerSetId(setId);\n        setModalSetOpen(true);\n    }\n    function openCaseModal(caseId) {\n        if (!caseId) throw new Error(\"Missing case id.\");\n        setActiveTrainerCaseId(caseId);\n        setModalCaseOpen(true);\n    }\n    function openPreviewModal() {\n        setModalPreviewOpen(true);\n    }\n    function renderInfo() {\n        return /*#__PURE__*/ (0, $ayMG0.jsxs)((0, $6naUs.Group), {\n            title: \"Info\",\n            children: [\n                /*#__PURE__*/ (0, $ayMG0.jsxs)(\"ul\", {\n                    className: `${className}__input-list`,\n                    children: [\n                        /*#__PURE__*/ (0, $ayMG0.jsx)(\"li\", {\n                            className: `${className}__id`,\n                            children: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $d3f2d60ec9a53303$export$f5b8910cec6cf069), {\n                                callback: (value)=>{\n                                    setTrainer({\n                                        ...trainer,\n                                        id: value\n                                    });\n                                },\n                                defaultValue: trainer.id,\n                                label: \"Id\",\n                                required: true,\n                                type: \"text\"\n                            })\n                        }),\n                        /*#__PURE__*/ (0, $ayMG0.jsx)(\"li\", {\n                            className: `${className}__name`,\n                            children: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $d3f2d60ec9a53303$export$f5b8910cec6cf069), {\n                                callback: (value)=>{\n                                    setTrainer({\n                                        ...trainer,\n                                        name: value\n                                    });\n                                },\n                                defaultValue: trainer.name,\n                                label: \"Name\",\n                                required: true,\n                                type: \"text\"\n                            })\n                        })\n                    ]\n                }),\n                /*#__PURE__*/ (0, $ayMG0.jsxs)(\"ul\", {\n                    className: `${className}__input-list`,\n                    children: [\n                        /*#__PURE__*/ (0, $ayMG0.jsx)(\"li\", {\n                            className: `${className}__name`,\n                            children: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $d3f2d60ec9a53303$export$f5b8910cec6cf069), {\n                                callback: (value)=>{\n                                    setTrainer({\n                                        ...trainer,\n                                        method: value\n                                    });\n                                },\n                                defaultValue: trainer.method,\n                                label: \"Method\",\n                                required: true,\n                                type: \"text\"\n                            })\n                        }),\n                        /*#__PURE__*/ (0, $ayMG0.jsx)(\"li\", {\n                            className: `${className}__version`,\n                            children: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $d3f2d60ec9a53303$export$f5b8910cec6cf069), {\n                                callback: (value)=>{\n                                    setTrainer({\n                                        ...trainer,\n                                        version: parseInt(value)\n                                    });\n                                },\n                                defaultValue: trainer.version.toString(),\n                                label: \"Version\",\n                                required: true,\n                                type: \"number\"\n                            })\n                        })\n                    ]\n                }),\n                /*#__PURE__*/ (0, $ayMG0.jsx)((0, $d3f2d60ec9a53303$export$f5b8910cec6cf069), {\n                    callback: (value)=>{\n                        setTrainer({\n                            ...trainer,\n                            authors: value\n                        });\n                    },\n                    defaultValue: trainer.authors,\n                    label: \"Authors\",\n                    required: true,\n                    type: \"text\"\n                }),\n                /*#__PURE__*/ (0, $ayMG0.jsx)((0, $1870dbfc6a16a2d8$export$379139ebc1c2b235), {\n                    callback: (value)=>{\n                        setTrainer({\n                            ...trainer,\n                            description: value\n                        });\n                    },\n                    defaultValue: trainer.description,\n                    label: \"Description\",\n                    required: true\n                })\n            ]\n        });\n    }\n    function renderConfiguration() {\n        const puzzleOptions = [];\n        (0, $65UFG.puzzleNames).forEach((puzzleName)=>{\n            puzzleOptions.push({\n                label: puzzleName,\n                value: puzzleName\n            });\n        });\n        const puzzleImagesOptions = [];\n        (0, $65UFG.puzzleImages)[trainer.puzzleName].forEach((image)=>{\n            puzzleImagesOptions.push({\n                label: (0, $iGgHx.capitalize)(image.split(\".\")[0].replace(\"-\", \" \")),\n                value: image\n            });\n        });\n        return /*#__PURE__*/ (0, $ayMG0.jsx)((0, $6naUs.Group), {\n            alignment: \"left\",\n            title: \"Configuration\",\n            children: /*#__PURE__*/ (0, $ayMG0.jsxs)((0, $bO1fg.List), {\n                children: [\n                    /*#__PURE__*/ (0, $ayMG0.jsx)((0, $e7904f39f9c0fb66$export$ef9b1a59e592288f), {\n                        callback: (value)=>{\n                            setTrainer({\n                                ...trainer,\n                                puzzleName: value\n                            });\n                        },\n                        defaultValue: trainer.puzzleName,\n                        label: \"Puzzle\",\n                        options: puzzleOptions\n                    }),\n                    /*#__PURE__*/ (0, $ayMG0.jsx)((0, $e7904f39f9c0fb66$export$ef9b1a59e592288f), {\n                        callback: (value)=>{\n                            setTrainer({\n                                ...trainer,\n                                puzzleImage: value\n                            });\n                        },\n                        defaultValue: trainer.puzzleImage,\n                        label: \"Preview\",\n                        options: puzzleImagesOptions\n                    })\n                ]\n            })\n        });\n    }\n    function renderSets() {\n        return /*#__PURE__*/ (0, $ayMG0.jsxs)((0, $6naUs.Group), {\n            alignment: \"left\",\n            title: `Sets (${numberOfSets})`,\n            children: [\n                /*#__PURE__*/ (0, $ayMG0.jsx)((0, $izgog.Button), {\n                    callback: addSet,\n                    iconName: \"plus-square\",\n                    label: \"Add Set\"\n                }),\n                numberOfSets > 0 && /*#__PURE__*/ (0, $ayMG0.jsx)(\"ul\", {\n                    className: `${className}__sets`,\n                    children: trainerSets.map((trainerSet, index)=>/*#__PURE__*/ (0, $ayMG0.jsx)(\"li\", {\n                            className: `${className}__set-item`,\n                            children: renderSet(trainerSet)\n                        }, `set-${index}`))\n                })\n            ]\n        });\n    }\n    function renderSet(trainerSet) {\n        if (!trainerSet) throw new Error(\"Missing trainer set.\");\n        const numberOfCasesInSet = (0, $iGgHx.getCasesFromSet)(trainer, trainerSet.id).length;\n        return /*#__PURE__*/ (0, $ayMG0.jsxs)(\"button\", {\n            className: `${className}__set`,\n            \"data-tooltip\": \"Edit set\",\n            \"data-tooltip-position\": \"center\",\n            onClick: ()=>openSetModal(trainerSet.id),\n            children: [\n                /*#__PURE__*/ (0, $ayMG0.jsx)(\"span\", {\n                    className: `${className}__set-id`,\n                    children: trainerSet.position\n                }),\n                /*#__PURE__*/ (0, $ayMG0.jsx)(\"span\", {\n                    className: `${className}__set-name`,\n                    children: trainerSet.name\n                }),\n                /*#__PURE__*/ (0, $ayMG0.jsx)(\"span\", {\n                    className: `${className}__set-cases`,\n                    children: numberOfCasesInSet\n                })\n            ]\n        });\n    }\n    function renderActions() {\n        return /*#__PURE__*/ (0, $ayMG0.jsx)((0, $6naUs.Group), {\n            title: \"Actions\",\n            children: /*#__PURE__*/ (0, $ayMG0.jsxs)((0, $bO1fg.List), {\n                children: [\n                    /*#__PURE__*/ (0, $ayMG0.jsx)((0, $izgog.Button), {\n                        callback: importTrainer,\n                        iconName: \"arrow-half-square-right\",\n                        label: \"Import\"\n                    }),\n                    /*#__PURE__*/ (0, $ayMG0.jsx)((0, $izgog.Button), {\n                        callback: exportTrainer,\n                        iconName: \"arrow-half-square-left\",\n                        label: \"Export\"\n                    })\n                ]\n            })\n        });\n    }\n    return /*#__PURE__*/ (0, $ayMG0.jsx)((0, $fcogW.Page), {\n        title: \"Editor\",\n        children: /*#__PURE__*/ (0, $ayMG0.jsxs)(\"div\", {\n            className: className,\n            children: [\n                /*#__PURE__*/ (0, $ayMG0.jsxs)(\"div\", {\n                    className: `${className}__content`,\n                    children: [\n                        renderInfo(),\n                        renderConfiguration(),\n                        renderSets(),\n                        renderActions()\n                    ]\n                }),\n                /*#__PURE__*/ (0, $ayMG0.jsx)((0, $e2b3f2946effb7d0$export$2b77a92f1a5ad772), {\n                    closeCallback: ()=>{\n                        if (!modalCaseOpen) setModalSetOpen(false);\n                    },\n                    open: modalSetOpen,\n                    title: trainer.sets?.[activeTrainerSetId]?.name,\n                    children: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $b4f3609a99daaab4$export$72aaff55e29e5d8c), {\n                        addCase: addCase,\n                        duplicateSet: duplicateSet,\n                        moveSet: moveSet,\n                        openCaseModal: openCaseModal,\n                        puzzlePreviewHash: puzzlePreviewHash,\n                        removeSet: removeSet,\n                        setTrainer: setTrainer,\n                        trainer: trainer,\n                        trainerSetId: activeTrainerSetId\n                    })\n                }),\n                /*#__PURE__*/ (0, $ayMG0.jsx)((0, $e2b3f2946effb7d0$export$2b77a92f1a5ad772), {\n                    closeCallback: ()=>{\n                        if (!modalPreviewOpen) setModalCaseOpen(false);\n                    },\n                    open: modalCaseOpen,\n                    title: trainer.cases?.[activeTrainerCaseId]?.name,\n                    children: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $5dcd0673c9efb9c7$export$a9bdc75bef574af8), {\n                        addSolution: addSolution,\n                        duplicateCase: duplicateCase,\n                        moveCase: moveCase,\n                        openPreviewModal: openPreviewModal,\n                        puzzlePreviewHash: puzzlePreviewHash,\n                        removeCase: removeCase,\n                        removeSolution: removeSolution,\n                        setTrainer: setTrainer,\n                        trainer: trainer,\n                        trainerCaseId: activeTrainerCaseId,\n                        trainerSetId: activeTrainerSetId\n                    })\n                }),\n                /*#__PURE__*/ (0, $ayMG0.jsx)((0, $e2b3f2946effb7d0$export$2b77a92f1a5ad772), {\n                    closeCallback: ()=>{\n                        setModalPreviewOpen(false);\n                        setPuzzlePreviewHash(Math.random().toString());\n                    },\n                    open: modalPreviewOpen,\n                    title: trainer.cases?.[activeTrainerCaseId]?.name,\n                    children: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $f48019685109d4e9$export$4dbcfed276ad8cd8), {\n                        trainer: trainer,\n                        trainerCaseId: activeTrainerCaseId\n                    })\n                })\n            ]\n        })\n    });\n}\nconst $8068a1e5d9cb5eb6$var$rootElement = document.getElementById(\"root\");\nif ($8068a1e5d9cb5eb6$var$rootElement) {\n    const root = (0, $aRPiL.createRoot)($8068a1e5d9cb5eb6$var$rootElement);\n    root.render(/*#__PURE__*/ (0, $ayMG0.jsx)((0, $AUWqP.ErrorBoundary), {\n        children: /*#__PURE__*/ (0, $ayMG0.jsx)($8068a1e5d9cb5eb6$var$Editor, {})\n    }));\n} else console.error(\"Could not find root element.\");\n\n\n//# sourceMappingURL=editor.75cb1f96.js.map\n","import cloneDeep from 'lodash/cloneDeep';\nimport React, { useEffect, useState } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Button } from './components/Button';\nimport { EditorCase } from './components/EditorCase';\nimport { EditorPreview } from './components/EditorPreview';\nimport { EditorSet } from './components/EditorSet';\nimport { ErrorBoundary } from './components/ErrorBoundary';\nimport { Group } from './components/Group';\nimport { Input } from './components/Input';\nimport { List } from './components/List';\nimport { Modal } from './components/Modal';\nimport { Page } from './components/Page';\nimport { Select } from './components/Select';\nimport { Textarea } from './components/Textarea';\nimport { puzzleImages, puzzleNames } from './puzzles/puzzles';\nimport { storeManager } from './StoreManager';\nimport { TPuzzleImage, TPuzzleName, TSelectOption, TTrainer, TTrainerCase, TTrainerSet } from './types';\nimport { capitalize, disableBodyScroll, enableBodyScroll, getCases, getCasesFromSet, getSets, updateColorSchemeCustomProperties } from './utils';\n\nfunction Editor () {\n    const className = 'editor';\n\n    const [trainer, setTrainer] = useState<TTrainer>({\n        id: 'example',\n        name: 'Example',\n        method: 'Other',\n        puzzleName: '3x3x3',\n        puzzleImage: 'three-faces',\n        version: 1,\n        authors: 'Author',\n        description: 'Description.',\n        sets: {\n            '0': {\n                id: '0',\n                position: 0,\n                name: 'Example Set'\n            }\n        },\n        cases: {\n            '0': {\n                id: '0',\n                position: 0,\n                setId: '0',\n                name: 'Example Case',\n                setup: `R U R' U'`,\n                solutions: [`U R U' R'`]\n            }\n        }\n    });\n    const [activeTrainerSetId, setActiveTrainerSetId] = useState('0');\n    const [activeTrainerCaseId, setActiveTrainerCaseId] = useState('0');\n    const [modalSetOpen, setModalSetOpen] = useState(false);\n    const [modalCaseOpen, setModalCaseOpen] = useState(false);\n    const [modalPreviewOpen, setModalPreviewOpen] = useState(false);\n    const [puzzlePreviewHash, setPuzzlePreviewHash] = useState(Math.random().toString());\n\n    document.title = 'SST - Editor';\n\n    const trainerSets = getSets(trainer);\n    const numberOfSets = trainerSets.length;\n    const numberOfSetsWithDeleted = getSets(trainer, false).length;\n    const numberOfCasesWithDeleted = getCases(trainer, false).length;\n\n    console.log(trainer);\n\n    useEffect(() => {\n        updateColorSchemeCustomProperties(storeManager.getColorScheme(trainer.puzzleName));\n\n        // Ask confirmation before leaving\n        window.addEventListener('beforeunload', (event) => {\n            event.preventDefault();\n        });\n    }, []);\n\n    useEffect(() => {\n        updateColorSchemeCustomProperties(storeManager.getColorScheme(trainer.puzzleName));\n    }, [trainer.puzzleName]);\n\n    useEffect(() => {\n        if (modalSetOpen || modalCaseOpen) {\n            disableBodyScroll();\n        }\n\n        if (!modalSetOpen && !modalCaseOpen) {\n            enableBodyScroll();\n        }\n    }, [modalSetOpen, modalCaseOpen]);\n\n    function importTrainer () {\n        const confirm = window.confirm('Are you sure you want to import a trainer? This will overwrite the current data, it cannot be undone.');\n\n        if (confirm) {\n            // Create an input upload the file\n            const inputElement = document.createElement('input');\n            inputElement.type = 'file';\n\n            // Add event listener to get the file\n            inputElement.addEventListener('change', () => {\n                // Get file text\n                inputElement.files?.[0].text().then((text) => {\n                    try {\n                        // Parse text\n                        const newTrainer = JSON.parse(text);\n                        // Update trainer\n                        setTrainer(newTrainer);\n                    } catch (error) {\n                        console.error(error);\n                        window.alert('Error: Corrupted trainer.');\n                    }\n                });\n            });\n\n            // Programatically click the input\n            inputElement.click();\n        }\n    }\n\n    function exportTrainer () {\n        // Create a file containing the trainer\n        const fileContent = JSON.stringify(trainer);\n        const file = new Blob([fileContent], { type: 'application/json' });\n\n        // Create a link to download the file\n        const linkElement = document.createElement('a');\n        linkElement.href = URL.createObjectURL(file);\n        linkElement.download = 'data.json';\n\n        // Programatically click the link\n        linkElement.click();\n    }\n\n    function addSet () {\n        setTrainer({\n            ...trainer,\n            sets: {\n                ...trainer.sets,\n                [numberOfSetsWithDeleted]: {\n                    id: numberOfSetsWithDeleted.toString(),\n                    position: numberOfSets,\n                    name: 'New Set'\n                }\n            }\n        });\n        setActiveTrainerSetId(numberOfSetsWithDeleted.toString());\n        setModalSetOpen(true);\n    }\n\n    function duplicateSet (setId: string) {\n        if (!setId) {\n            throw new Error('Missing set id.');\n        }\n\n        const newCases: TTrainer['cases'] = cloneDeep(trainer.cases);\n        const casesFromSet = getCasesFromSet(trainer, setId);\n\n        casesFromSet.forEach((trainerCase, index) => {\n            const newCase: TTrainerCase = cloneDeep(trainerCase);\n            newCase.id = (numberOfCasesWithDeleted + index).toString();\n            newCase.setId = numberOfSetsWithDeleted.toString();\n            newCase.name = `Copy of ${trainerCase.name}`;\n\n            newCases[numberOfCasesWithDeleted + index] = newCase;\n        });\n\n        setTrainer({\n            ...trainer,\n            sets: {\n                ...trainer.sets,\n                [numberOfSetsWithDeleted.toString()]: {\n                    ...trainer.sets[setId],\n                    id: numberOfSetsWithDeleted.toString(),\n                    position: numberOfSets,\n                    name: `Copy of ${trainer.sets[setId].name}`\n                }\n            },\n            cases: newCases\n        });\n\n        setActiveTrainerSetId(numberOfSetsWithDeleted.toString());\n    }\n\n    function removeSet (setId: string) {\n        if (!setId) {\n            throw new Error('Missing set id.');\n        }\n\n        const confirm = window.confirm(`Are you sure you want to remove this set and all it's cases?`);\n\n        if (!confirm) {\n            return;\n        }\n\n        const newSets: TTrainer['sets'] = cloneDeep(trainer.sets);\n\n        // Delete set\n        newSets[setId] = {\n            ...newSets[setId],\n            deleted: true\n        };\n\n        // Update position of sets\n        Object.keys(newSets).forEach((newSetId) => {\n            // If set is not deleted and it's position is greater than the set to delete\n            if (\n                !newSets[newSetId].deleted\n                && newSets[newSetId].position > newSets[setId].position\n            ) {\n                newSets[newSetId].position--;\n            }\n        });\n\n        const newCases: TTrainer['cases'] = cloneDeep(trainer.cases);\n\n        // Delete cases from set\n        Object.keys(newCases).forEach((newCaseId) => {\n            // If case belongs to the set to delete\n            if (newCases[newCaseId].setId === setId) {\n                newCases[newCaseId] = {\n                    ...newCases[newCaseId],\n                    deleted: true\n                };\n            }\n        });\n\n        setModalSetOpen(false);\n\n        setTrainer({\n            ...trainer,\n            sets: newSets,\n            cases: newCases\n        });\n    }\n\n    function moveSet (setId: string, newPosition: number) {\n        if (!setId) {\n            throw new Error('Missing set id.');\n        }\n\n        if (typeof(newPosition) !== 'number') {\n            throw new Error('Missing new position.');\n        }\n\n        const newSets: TTrainer['sets'] = cloneDeep(trainer.sets);\n        const oldPosition = newSets[setId].position;\n\n        // If the position is decreasing\n        if (newPosition < trainer.sets[setId].position) {\n            // For each set\n            Object.keys(newSets).forEach((newSetId) => {\n                // If the set is the one moving\n                if (newSetId === setId) {\n                    newSets[newSetId].position = newPosition;\n                }\n                // If the set's position is between the new and the old postion\n                else if (newSets[newSetId].position >= newPosition && newSets[newSetId].position < oldPosition) {\n                    newSets[newSetId].position++;\n                }\n            });\n        }\n\n        // If the position is increasing\n        if (newPosition > trainer.sets[setId].position) {\n            // For each set\n            Object.keys(newSets).forEach((newSetId) => {\n                // If the set is the one moving\n                if (newSetId === setId) {\n                    newSets[newSetId].position = newPosition;\n                }\n                // If the set's position is between the old and the new position\n                else if (newSets[newSetId].position > oldPosition && newSets[newSetId].position <= newPosition) {\n                    newSets[newSetId].position--;\n                }\n            });\n        }\n\n        setTrainer({\n            ...trainer,\n            sets: newSets\n        });\n    }\n\n    function addCase (setId: string) {\n        if (!setId) {\n            throw new Error('Missing set id.');\n        }\n\n        const numberOfCasesInSet = getCasesFromSet(trainer, setId).length;\n\n        setTrainer({\n            ...trainer,\n            cases: {\n                ...trainer.cases,\n                [numberOfCasesWithDeleted]: {\n                    id: numberOfCasesWithDeleted.toString(),\n                    position: numberOfCasesInSet,\n                    setId,\n                    name: 'New Case',\n                    solutions: ['']\n                }\n            }\n        });\n\n        setActiveTrainerCaseId(numberOfCasesWithDeleted.toString());\n        setModalCaseOpen(true);\n    }\n\n    function duplicateCase (caseId: string) {\n        if (!caseId) {\n            throw new Error('Missing case id.');\n        }\n\n        const numberOfCasesInSet = getCasesFromSet(trainer, trainer.cases[caseId].setId).length;\n\n        const newCase: TTrainerCase = cloneDeep(trainer.cases[caseId]);\n        newCase.id = numberOfCasesWithDeleted.toString();\n        newCase.position = numberOfCasesInSet;\n        newCase.name = `Copy of ${trainer.cases[caseId].name}`;\n\n        setTrainer({\n            ...trainer,\n            cases: {\n                ...trainer.cases,\n                [numberOfCasesWithDeleted]: newCase\n            }\n        });\n\n        setActiveTrainerCaseId(numberOfCasesWithDeleted.toString());\n    }\n\n    function removeCase (caseId: string) {\n        if (!caseId) {\n            throw new Error('Missing case id.');\n        }\n\n        const confirm = window.confirm('Are you sure you want to remove this case?');\n\n        if (!confirm) {\n            return;\n        }\n\n        const newCases: TTrainer['cases'] = cloneDeep(trainer.cases);\n\n        // Delete case\n        newCases[caseId] = {\n            ...newCases[caseId],\n            deleted: true\n        };\n\n        // Update position of cases\n        Object.keys(newCases).forEach((newCaseId) => {\n            // If case is not deleted and it's position is greater than the case to delete\n            if (\n                !newCases[newCaseId].deleted\n                && newCases[newCaseId].position > newCases[caseId].position\n            ) {\n                newCases[newCaseId].position--;\n            }\n        });\n\n        setModalCaseOpen(false);\n\n        setTrainer({\n            ...trainer,\n            cases: newCases\n        });\n    }\n\n    function moveCase (caseId: string, newPosition: number) {\n        if (!caseId) {\n            throw new Error('Missing case id.');\n        }\n\n        if (typeof(newPosition) !== 'number') {\n            throw new Error('Missing new position.');\n        }\n\n        const newCases: TTrainer['cases'] = cloneDeep(trainer.cases);\n        const setId = newCases[caseId].setId;\n        const oldPosition = newCases[caseId].position;\n\n        // If the position is decreasing\n        if (newPosition < trainer.cases[caseId].position) {\n            // For each case\n            Object.keys(newCases).forEach((newCaseId) => {\n                if (newCases[newCaseId].setId !== setId) {\n                    return;\n                }\n\n                // If the case is the one moving\n                if (newCaseId === caseId) {\n                    newCases[newCaseId].position = newPosition;\n                }\n                // If the case's position is between the new and the old postion\n                else if (newCases[newCaseId].position >= newPosition && newCases[newCaseId].position < oldPosition) {\n                    newCases[newCaseId].position++;\n                }\n            });\n        }\n\n        // If the position is increasing\n        if (newPosition > trainer.cases[caseId].position) {\n            // For each case\n            Object.keys(newCases).forEach((newCaseId) => {\n                if (newCases[newCaseId].setId !== setId) {\n                    return;\n                }\n\n                // If the case is the one moving\n                if (newCaseId === caseId) {\n                    newCases[newCaseId].position = newPosition;\n                }\n                // If the case's position is between the old and the new position\n                else if (newCases[newCaseId].position > oldPosition && newCases[newCaseId].position <= newPosition) {\n                    newCases[newCaseId].position--;\n                }\n            });\n        }\n\n        setTrainer({\n            ...trainer,\n            cases: newCases\n        });\n    }\n\n    function addSolution (caseId: string) {\n        if (!caseId) {\n            throw new Error('Missing case id.');\n        }\n\n        const newSolutions = trainer.cases[caseId].solutions || [];\n\n        newSolutions.push('');\n\n        setTrainer({\n            ...trainer,\n            cases: {\n                ...trainer.cases,\n                [caseId]: {\n                    ...trainer.cases[caseId],\n                    solutions: newSolutions\n                }\n            }\n        });\n    }\n\n    function removeSolution (caseId: string, solutionIndex: number) {\n        if (!caseId) {\n            throw new Error('Missing case id.');\n        }\n\n        if (typeof(solutionIndex) !== 'number') {\n            throw new Error('Missing solution index.');\n        }\n\n        const confirm = window.confirm('Are you sure you want to remove this solution?');\n\n        if (!confirm) {\n            return;\n        }\n\n        const newSolutions = trainer.cases[caseId].solutions || [];\n\n        newSolutions.splice(solutionIndex, 1);\n\n        setTrainer({\n            ...trainer,\n            cases: {\n                ...trainer.cases,\n                [caseId]: {\n                    ...trainer.cases[caseId],\n                    solutions: newSolutions\n                }\n            }\n        });\n    }\n\n    function openSetModal (setId: string) {\n        if (!setId) {\n            throw new Error('Missing set id.');\n        }\n\n        setActiveTrainerSetId(setId);\n        setModalSetOpen(true);\n    }\n\n    function openCaseModal (caseId: string) {\n        if (!caseId) {\n            throw new Error('Missing case id.');\n        }\n\n        setActiveTrainerCaseId(caseId);\n        setModalCaseOpen(true);\n    }\n\n    function openPreviewModal () {\n        setModalPreviewOpen(true);\n    }\n\n    function renderInfo () {\n        return (\n            <Group title='Info'>\n                <ul className={`${className}__input-list`}>\n                    <li className={`${className}__id`}>\n                        {/* Id */}\n                        <Input\n                            callback={(value) => {\n                                setTrainer({ ...trainer, id: value as string });\n                            }}\n                            defaultValue={trainer.id}\n                            label='Id'\n                            required={true}\n                            type='text'\n                        />\n                    </li>\n                    <li className={`${className}__name`}>\n                        {/* Name */}\n                        <Input\n                            callback={(value) => {\n                                setTrainer({ ...trainer, name: value as string });\n                            }}\n                            defaultValue={trainer.name}\n                            label='Name'\n                            required={true}\n                            type='text'\n                        />\n                    </li>\n                </ul>\n                <ul className={`${className}__input-list`}>\n                    <li className={`${className}__name`}>\n                        {/* Method */}\n                        <Input\n                            callback={(value) => {\n                                setTrainer({ ...trainer, method: value as string });\n                            }}\n                            defaultValue={trainer.method}\n                            label='Method'\n                            required={true}\n                            type='text'\n                        />\n                    </li>\n                    <li className={`${className}__version`}>\n                        {/* Version */}\n                        <Input\n                            callback={(value) => {\n                                setTrainer({ ...trainer, version: parseInt(value) });\n                            }}\n                            defaultValue={trainer.version.toString()}\n                            label='Version'\n                            required={true}\n                            type='number'\n                        />\n                    </li>\n                </ul>\n                {/* Authors */}\n                <Input\n                    callback={(value) => {\n                        setTrainer({ ...trainer, authors: value as string });\n                    }}\n                    defaultValue={trainer.authors}\n                    label='Authors'\n                    required={true}\n                    type='text'\n                />\n                {/* Description */}\n                <Textarea\n                    callback={(value) => {\n                        setTrainer({ ...trainer, description: value as string });\n                    }}\n                    defaultValue={trainer.description}\n                    label='Description'\n                    required={true}\n                />\n            </Group>\n        );\n    }\n\n    function renderConfiguration () {\n        const puzzleOptions: TSelectOption[] = [];\n        puzzleNames.forEach((puzzleName) => {\n            puzzleOptions.push({\n                label: puzzleName,\n                value: puzzleName\n            });\n        });\n\n        const puzzleImagesOptions: TSelectOption[] = [];\n        puzzleImages[trainer.puzzleName].forEach((image) => {\n            puzzleImagesOptions.push({\n                label: capitalize(image.split('.')[0].replace('-', ' ')),\n                value: image\n            });\n        });\n\n        return (\n            <Group alignment='left' title='Configuration'>\n                <List>\n                    <Select\n                        callback={(value) => {\n                            setTrainer({ ...trainer, puzzleName: value as TPuzzleName });\n                        }}\n                        defaultValue={trainer.puzzleName}\n                        label='Puzzle'\n                        options={puzzleOptions}\n                    />\n                    <Select\n                        callback={(value) => {\n                            setTrainer({ ...trainer, puzzleImage: value as TPuzzleImage });\n                        }}\n                        defaultValue={trainer.puzzleImage}\n                        label='Preview'\n                        options={puzzleImagesOptions}\n                    />\n                </List>\n            </Group>\n        );\n    }\n\n    function renderSets () {\n        return (\n            <Group alignment='left' title={`Sets (${numberOfSets})`}>\n                <Button\n                    callback={addSet}\n                    iconName='plus-square'\n                    label='Add Set'\n                />\n                {\n                    numberOfSets > 0 && (\n                        <ul className={`${className}__sets`}>\n                            {\n                                trainerSets.map((trainerSet, index) => (\n                                    <li className={`${className}__set-item`} key={`set-${index}`}>\n                                        {renderSet(trainerSet)}\n                                    </li>\n                                ))\n                            }\n                        </ul>\n                    )\n                }\n            </Group>\n        );\n    }\n\n    function renderSet (trainerSet: TTrainerSet) {\n        if (!trainerSet) {\n            throw new Error('Missing trainer set.');\n        }\n\n        const numberOfCasesInSet = getCasesFromSet(trainer, trainerSet.id).length;\n\n        return (\n            <button\n                className={`${className}__set`}\n                data-tooltip='Edit set'\n                data-tooltip-position='center'\n                onClick={() => openSetModal(trainerSet.id)}\n            >\n                <span className={`${className}__set-id`}>{trainerSet.position}</span>\n                <span className={`${className}__set-name`}>{trainerSet.name}</span>\n                <span className={`${className}__set-cases`}>{numberOfCasesInSet}</span>\n            </button>\n        );\n    }\n\n    function renderActions () {\n        return (\n            <Group title='Actions'>\n                <List>\n                    <Button\n                        callback={importTrainer}\n                        iconName='arrow-half-square-right'\n                        label='Import'\n                    />\n                    <Button\n                        callback={exportTrainer}\n                        iconName='arrow-half-square-left'\n                        label='Export'\n                    />\n                </List>\n            </Group>\n        );\n    }\n\n    return (\n        <Page title='Editor'>\n            <div className={className}>\n                <div className={`${className}__content`}>\n                    {renderInfo()}\n                    {renderConfiguration()}\n                    {renderSets()}\n                    {renderActions()}\n                </div>\n                <Modal\n                    closeCallback={() => {\n                        if (!modalCaseOpen) {\n                            setModalSetOpen(false);\n                        }\n                    }}\n                    open={modalSetOpen}\n                    title={trainer.sets?.[activeTrainerSetId]?.name}\n                >\n                    <EditorSet\n                        addCase={addCase}\n                        duplicateSet={duplicateSet}\n                        moveSet={moveSet}\n                        openCaseModal={openCaseModal}\n                        puzzlePreviewHash={puzzlePreviewHash}\n                        removeSet={removeSet}\n                        setTrainer={setTrainer}\n                        trainer={trainer}\n                        trainerSetId={activeTrainerSetId}\n                    />\n                </Modal>\n                <Modal\n                    closeCallback={() => {\n                        if (!modalPreviewOpen) {\n                            setModalCaseOpen(false);\n                        }\n                    }}\n                    open={modalCaseOpen}\n                    title={trainer.cases?.[activeTrainerCaseId]?.name}\n                >\n                    <EditorCase\n                        addSolution={addSolution}\n                        duplicateCase={duplicateCase}\n                        moveCase={moveCase}\n                        openPreviewModal={openPreviewModal}\n                        puzzlePreviewHash={puzzlePreviewHash}\n                        removeCase={removeCase}\n                        removeSolution={removeSolution}\n                        setTrainer={setTrainer}\n                        trainer={trainer}\n                        trainerCaseId={activeTrainerCaseId}\n                        trainerSetId={activeTrainerSetId}\n                    />\n                </Modal>\n                <Modal\n                    closeCallback={() => {\n                        setModalPreviewOpen(false);\n                        setPuzzlePreviewHash(Math.random().toString());\n                    }}\n                    open={modalPreviewOpen}\n                    title={trainer.cases?.[activeTrainerCaseId]?.name}\n                >\n                    <EditorPreview\n                        trainer={trainer}\n                        trainerCaseId={activeTrainerCaseId}\n                    />\n                </Modal>\n            </div>\n        </Page>\n    );\n}\n\nconst rootElement = document.getElementById('root');\n\nif (rootElement) {\n    const root = createRoot(rootElement);\n\n    root.render(\n        <ErrorBoundary>\n            <Editor />\n        </ErrorBoundary>\n    );\n} else {\n    console.error('Could not find root element.');\n}","var baseClone = require('./_baseClone');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n}\n\nmodule.exports = cloneDeep;\n","var Stack = require('./_Stack'),\n    arrayEach = require('./_arrayEach'),\n    assignValue = require('./_assignValue'),\n    baseAssign = require('./_baseAssign'),\n    baseAssignIn = require('./_baseAssignIn'),\n    cloneBuffer = require('./_cloneBuffer'),\n    copyArray = require('./_copyArray'),\n    copySymbols = require('./_copySymbols'),\n    copySymbolsIn = require('./_copySymbolsIn'),\n    getAllKeys = require('./_getAllKeys'),\n    getAllKeysIn = require('./_getAllKeysIn'),\n    getTag = require('./_getTag'),\n    initCloneArray = require('./_initCloneArray'),\n    initCloneByTag = require('./_initCloneByTag'),\n    initCloneObject = require('./_initCloneObject'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isMap = require('./isMap'),\n    isObject = require('./isObject'),\n    isSet = require('./isSet'),\n    keys = require('./keys'),\n    keysIn = require('./keysIn');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Deep clone\n *  2 - Flatten inherited properties\n *  4 - Clone symbols\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, bitmask, customizer, key, object, stack) {\n  var result,\n      isDeep = bitmask & CLONE_DEEP_FLAG,\n      isFlat = bitmask & CLONE_FLAT_FLAG,\n      isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      result = (isFlat || isFunc) ? {} : initCloneObject(value);\n      if (!isDeep) {\n        return isFlat\n          ? copySymbolsIn(value, baseAssignIn(result, value))\n          : copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (isSet(value)) {\n    value.forEach(function(subValue) {\n      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n    });\n  } else if (isMap(value)) {\n    value.forEach(function(subValue, key) {\n      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n    });\n  }\n\n  var keysFunc = isFull\n    ? (isFlat ? getAllKeysIn : getAllKeys)\n    : (isFlat ? keysIn : keys);\n\n  var props = isArr ? undefined : keysFunc(value);\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n  });\n  return result;\n}\n\nmodule.exports = baseClone;\n","/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\nmodule.exports = arrayEach;\n","var copyObject = require('./_copyObject'),\n    keys = require('./keys');\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\nmodule.exports = baseAssign;\n","var copyObject = require('./_copyObject'),\n    keysIn = require('./keysIn');\n\n/**\n * The base implementation of `_.assignIn` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssignIn(object, source) {\n  return object && copyObject(source, keysIn(source), object);\n}\n\nmodule.exports = baseAssignIn;\n","var copyObject = require('./_copyObject'),\n    getSymbols = require('./_getSymbols');\n\n/**\n * Copies own symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\nmodule.exports = copySymbols;\n","var copyObject = require('./_copyObject'),\n    getSymbolsIn = require('./_getSymbolsIn');\n\n/**\n * Copies own and inherited symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbolsIn(source, object) {\n  return copyObject(source, getSymbolsIn(source), object);\n}\n\nmodule.exports = copySymbolsIn;\n","var arrayPush = require('./_arrayPush'),\n    getPrototype = require('./_getPrototype'),\n    getSymbols = require('./_getSymbols'),\n    stubArray = require('./stubArray');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own and inherited enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n  var result = [];\n  while (object) {\n    arrayPush(result, getSymbols(object));\n    object = getPrototype(object);\n  }\n  return result;\n};\n\nmodule.exports = getSymbolsIn;\n","var baseGetAllKeys = require('./_baseGetAllKeys'),\n    getSymbolsIn = require('./_getSymbolsIn'),\n    keysIn = require('./keysIn');\n\n/**\n * Creates an array of own and inherited enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeysIn(object) {\n  return baseGetAllKeys(object, keysIn, getSymbolsIn);\n}\n\nmodule.exports = getAllKeysIn;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = new array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\nmodule.exports = initCloneArray;\n","var cloneArrayBuffer = require('./_cloneArrayBuffer'),\n    cloneDataView = require('./_cloneDataView'),\n    cloneRegExp = require('./_cloneRegExp'),\n    cloneSymbol = require('./_cloneSymbol'),\n    cloneTypedArray = require('./_cloneTypedArray');\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return new Ctor;\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return new Ctor;\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\nmodule.exports = initCloneByTag;\n","var cloneArrayBuffer = require('./_cloneArrayBuffer');\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\nmodule.exports = cloneDataView;\n","/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\nmodule.exports = cloneRegExp;\n","var Symbol = require('./_Symbol');\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\nmodule.exports = cloneSymbol;\n","var baseIsMap = require('./_baseIsMap'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsMap = nodeUtil && nodeUtil.isMap;\n\n/**\n * Checks if `value` is classified as a `Map` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n * @example\n *\n * _.isMap(new Map);\n * // => true\n *\n * _.isMap(new WeakMap);\n * // => false\n */\nvar isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n\nmodule.exports = isMap;\n","var getTag = require('./_getTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]';\n\n/**\n * The base implementation of `_.isMap` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n */\nfunction baseIsMap(value) {\n  return isObjectLike(value) && getTag(value) == mapTag;\n}\n\nmodule.exports = baseIsMap;\n","var baseIsSet = require('./_baseIsSet'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsSet = nodeUtil && nodeUtil.isSet;\n\n/**\n * Checks if `value` is classified as a `Set` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n * @example\n *\n * _.isSet(new Set);\n * // => true\n *\n * _.isSet(new WeakSet);\n * // => false\n */\nvar isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n\nmodule.exports = isSet;\n","var getTag = require('./_getTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar setTag = '[object Set]';\n\n/**\n * The base implementation of `_.isSet` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n */\nfunction baseIsSet(value) {\n  return isObjectLike(value) && getTag(value) == setTag;\n}\n\nmodule.exports = baseIsSet;\n","import React, { Fragment } from 'react';\nimport { Button } from '../components/Button';\nimport { Group } from '../components/Group';\nimport { Input } from '../components/Input';\nimport { List } from '../components/List';\nimport { Separator } from '../components/Separator';\nimport { TTrainer } from '../types';\nimport { getCaseImageSource, getCasesFromSet } from '../utils';\nimport { PuzzlePreview } from './PuzzlePreview';\n\ntype TProps = {\n    addSolution: (caseId: string) => void;\n    duplicateCase: (caseId: string) => void;\n    moveCase: (caseId: string, newPosition: number) => void;\n    openPreviewModal: () => void;\n    puzzlePreviewHash: string;\n    removeCase: (caseId: string) => void;\n    removeSolution: (caseId: string, solutionIndex: number) => void;\n    setTrainer: (trainer: TTrainer) => void;\n    trainer: TTrainer;\n    trainerCaseId: string;\n    trainerSetId: string;\n};\n\nexport function EditorCase ({\n    addSolution,\n    duplicateCase,\n    moveCase,\n    openPreviewModal,\n    puzzlePreviewHash,\n    removeCase,\n    removeSolution,\n    setTrainer,\n    trainer,\n    trainerCaseId,\n    trainerSetId\n}: TProps) {\n    const className = 'editor-case';\n\n    const numberOfCases = getCasesFromSet(trainer, trainerSetId).length;\n    const trainerCase = trainer.cases[trainerCaseId];\n    const numberOfSolutions = trainerCase.solutions?.length || 0;\n\n    if (!trainerCase) {\n        return;\n    }\n\n    function moveSolution (currentIndex: number, newIndex: number) {\n        if (!trainerCase.solutions || numberOfSolutions <= 1) {\n            return;\n        }\n\n        const solutionToMove = trainerCase.solutions[currentIndex];\n        const newSolutions = trainerCase.solutions;\n\n        newSolutions.splice(currentIndex, 1);\n\n        if (newIndex < 0) {\n            newSolutions.push(solutionToMove);\n        } else if (newIndex > numberOfSolutions - 1) {\n            newSolutions.unshift(solutionToMove);\n        } else {\n            newSolutions.splice(newIndex, 0, solutionToMove);\n        }\n\n        setTrainer({\n            ...trainer,\n            cases: {\n                ...trainer.cases,\n                [trainerCaseId]: {\n                    ...trainer.cases[trainerCaseId],\n                    solutions: newSolutions\n                }\n            }\n        });\n    }\n\n    function renderInfo () {\n        return (\n            <Group title='Info'>\n                <ul className={`${className}__input-list`}>\n                    {/* Id */}\n                    <li className={`${className}__id`}>\n                        <Input\n                            defaultValue={trainerCase.id}\n                            disabled={true}\n                            label='Id'\n                            required={true}\n                            type='text'\n                        />\n                    </li>\n                    {/* Name */}\n                    <li className={`${className}__name`}>\n                        <Input\n                            callback={(value) => {\n                                setTrainer({\n                                    ...trainer,\n                                    cases: {\n                                        ...trainer.cases,\n                                        [trainerCaseId]: {\n                                            ...trainer.cases[trainerCaseId],\n                                            name: value as string\n                                        }\n                                    }\n                                });\n                            }}\n                            defaultValue={trainerCase.name}\n                            label='Name'\n                            required={true}\n                            type='text'\n                        />\n                    </li>\n                    {/* Position */}\n                    <li className={`${className}__position`}>\n                        <Input\n                            callback={(value) => {\n                                moveCase(trainerCaseId, parseInt(value));\n                            }}\n                            defaultValue={trainerCase.position.toString()}\n                            label='Position'\n                            max={numberOfCases - 1}\n                            min={0}\n                            required={true}\n                            type='number'\n                        />\n                    </li>\n                </ul>\n                <List>\n                    <Button\n                        callback={() => duplicateCase(trainerCaseId)}\n                        label='Duplicate Case'\n                        iconName='plus-square-double'\n                    />\n                    <Button\n                        callback={() => removeCase(trainerCaseId)}\n                        color='red'\n                        label='Remove Case'\n                        iconName='trash'\n                    />\n                </List>\n            </Group>\n        );\n    }\n\n    function renderPreview () {\n        const source = getCaseImageSource(trainer.puzzleName, trainer.id, trainerCaseId);\n\n        return (\n            <Group alignment='center' title='Preview'>\n                <div className={`${className}__puzzle-preview`}>\n                    <PuzzlePreview\n                        cacheRequests={false}\n                        key={puzzlePreviewHash}\n                        source={source}\n                    />\n                </div>\n                <Button\n                    callback={openPreviewModal}\n                    iconName='paint-bucket-drip'\n                    label='Edit Preview'\n                />\n            </Group>\n        );\n    }\n\n    function renderSetup () {\n        return (\n            <Group title='Setup'>\n                <Input\n                    callback={(value) => {\n                        setTrainer({\n                            ...trainer,\n                            cases: {\n                                ...trainer.cases,\n                                [trainerCaseId]: {\n                                    ...trainer.cases[trainerCaseId],\n                                    setup: value as string\n                                }\n                            }\n                        });\n                    }}\n                    defaultValue={trainerCase.setup || ''}\n                    label='Setup'\n                    largeLetterSpacing={true}\n                    type='text'\n                />\n            </Group>\n        );\n    }\n\n    function renderSolutions () {\n        return (\n            <Group title={`Solutions (${numberOfSolutions})`}>\n                <div>\n                    <Button\n                        callback={() => addSolution(trainerCaseId)}\n                        iconName='plus-square'\n                        label='Add Solution'\n                    />\n                </div>\n                {\n                    trainerCase.solutions && trainerCase.solutions.length > 0 && (\n                        <ul className={`${className}__solutions`}>\n                            {\n                                trainerCase.solutions.map((solution, index) => {\n                                    return (\n                                        <Fragment key={`solution-${index}`}>\n                                            {renderSolution(solution, index)}\n                                            { index < numberOfSolutions - 1 && <Separator /> }\n                                        </Fragment>\n                                    );\n                                })\n                            }\n                        </ul>\n                    )\n                }\n            </Group>\n        );\n    }\n\n    function renderSolution (solution: string, index: number) {\n        return (\n            <li className={`${className}__solution`}>\n                <Input\n                    callback={(value) => {\n                        const newSolutions = trainer.cases[trainerCaseId].solutions || [];\n                        newSolutions[index] = value as string;\n\n                        setTrainer({\n                            ...trainer,\n                            cases: {\n                                ...trainer.cases,\n                                [trainerCaseId]: {\n                                    ...trainer.cases[trainerCaseId],\n                                    solutions: newSolutions\n                                }\n                            }\n                        });\n                    }}\n                    defaultValue={solution}\n                    label={`Solution ${index + 1}`}\n                    largeLetterSpacing={true}\n                    required={true}\n                    type='text'\n                />\n                <List>\n                    {\n                        numberOfSolutions > 1 && (\n                            <Button\n                                callback={() => moveSolution(index, index - 1)}\n                                iconName='arrow-up'\n                                tooltip='Move solution up'\n                            />\n                        )\n                    }\n                    {\n                        numberOfSolutions > 1 && (\n                            <Button\n                                callback={() => moveSolution(index, index + 1)}\n                                iconName='arrow-down'\n                                tooltip='Move solution down'\n                            />\n                        )\n                    }\n                    <Button\n                        callback={() => removeSolution(trainerCaseId, index)}\n                        color='red'\n                        iconName='trash'\n                        label='Remove Solution'\n                    />\n                </List>\n            </li>\n        );\n    }\n\n    return (\n        <div className={className}>\n            {renderInfo()}\n            <div className={`${className}__columns`}>\n                <div className={`${className}__column`}>\n                    {renderPreview()}\n                </div>\n                <div className={`${className}__column`}>\n                    {renderSetup()}\n                    {renderSolutions()}\n                </div>\n            </div>\n        </div>\n    );\n}","import React, { ChangeEvent, useEffect, useState } from 'react';\r\nimport { getRandomInteger } from '../utils';\r\n\r\ntype TProps = {\r\n    callback?: (value: string) => unknown;\r\n    defaultValue?: string;\r\n    disabled?: boolean;\r\n    label: string;\r\n    largeLetterSpacing?: boolean;\r\n    max?: number;\r\n    min?: number;\r\n    required?: boolean;\r\n    type: 'number' | 'text';\r\n};\r\n\r\nexport function Input ({\r\n    callback,\r\n    defaultValue,\r\n    disabled = false,\r\n    label,\r\n    largeLetterSpacing,\r\n    max,\r\n    min,\r\n    required = false,\r\n    type\r\n}: TProps) {\r\n    const className = 'input';\r\n    const classNames = [className];\r\n\r\n    if (largeLetterSpacing) {\r\n        classNames.push(`${className}--large-letter-spacing`);\r\n    }\r\n\r\n    const [value, setValue] = useState(defaultValue !== null && defaultValue !== undefined ? defaultValue : '');\r\n\r\n    // Create unique id for the input\r\n    const inputId = `input-${getRandomInteger(100000, 999999)}`;\r\n\r\n    useEffect(() => {\r\n        // Update default value it changes\r\n        setValue(defaultValue !== null && defaultValue !== undefined ? defaultValue : '');\r\n    }, [defaultValue]);\r\n\r\n    function changeHandler (event: ChangeEvent<HTMLInputElement>) {\r\n        const value = event.target.value;\r\n\r\n        setValue(value);\r\n\r\n        if (callback) {\r\n            callback(value);\r\n        }\r\n    }\r\n\r\n    function blurHandler (event: ChangeEvent<HTMLInputElement>) {\r\n        const trimmedValue = event.target.value.trim();\r\n\r\n        setValue(trimmedValue);\r\n\r\n        if (callback) {\r\n            callback(trimmedValue);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classNames.join(' ')}>\r\n            <label className={`${className}__label`} htmlFor={inputId}>\r\n                {label} {required && <span className={`${className}__required`}>*</span>}\r\n            </label>\r\n            <input\r\n                className={`${className}__input`}\r\n                disabled={disabled}\r\n                id={inputId}\r\n                max={max}\r\n                min={min}\r\n                onBlur={blurHandler}\r\n                onChange={changeHandler}\r\n                type={type}\r\n                required={required}\r\n                value={value}\r\n            />\r\n        </div>\r\n    );\r\n}","import React, { RefObject, useState } from 'react';\nimport { storeManager } from '../StoreManager';\nimport { TTrainer } from '../types';\nimport { getCaseImageSource } from '../utils';\nimport { Button } from './Button';\nimport { Group } from './Group';\nimport { List } from './List';\nimport { PuzzlePreview } from './PuzzlePreview';\n\ntype TProps = {\n    trainer: TTrainer;\n    trainerCaseId: string;\n};\n\nexport function EditorPreview ({ trainer, trainerCaseId }: TProps) {\n    const className = 'editor-preview';\n\n    const [activeColorName, setActiveColorName] = useState('--color-ignore');\n    const [puzzlePreviewHash, setPuzzlePreviewHash] = useState(Math.random().toString());\n    const [source, setSource] = useState(getCaseImageSource(trainer.puzzleName, trainer.id, trainerCaseId));\n\n    const [svgRef, setSvgRef] = useState<RefObject<SVGElement>>();\n\n    const colorScheme = storeManager.getColorScheme(trainer.puzzleName);\n\n    function puzzlePreviewLoadHandler (svgRef: RefObject<SVGElement>) {\n        if (!svgRef) {\n            throw new Error('Missing SVG reference.');\n        }\n\n        setSvgRef(svgRef);\n    }\n\n    function puzzlePreviewErrorHandler () {\n        // Use the default image if the case's image doesn't load\n        setSource(`/assets/images/puzzles/${trainer.puzzleName}/${trainer.puzzleImage}.svg`);\n    }\n\n    function puzzleClickHandler (event) {\n        if (event.target.tagName === 'path') {\n            // Set fill property on the path that was clicked\n            event.target.setAttribute('style', `fill: var(${activeColorName})`);\n        }\n    }\n\n    function downloadButtonClickHandler () {\n        if (svgRef && svgRef.current) {\n            // Create a file containing the SVG\n            const fileContent = svgRef.current.outerHTML;\n            const file = new Blob([fileContent], { type: 'image/svg+xml' });\n\n            // Create a link to download teh file\n            const linkElement = document.createElement('a');\n            linkElement.href = URL.createObjectURL(file);\n            linkElement.download = `${trainerCaseId}.svg`;\n\n            // Programatically click the link\n            linkElement.click();\n        }\n    }\n\n    function resetPuzzle () {\n        setSource(`/assets/images/puzzles/${trainer.puzzleName}/${trainer.puzzleImage}.svg`);\n        setPuzzlePreviewHash(Math.random().toString());\n    }\n\n    function emptyPuzzle () {\n        if (!svgRef?.current) {\n            return;\n        }\n\n        const pathElements = svgRef.current.querySelectorAll('path') as NodeListOf<SVGPathElement>;\n\n        pathElements.forEach((pathElement) => {\n            pathElement.setAttribute('style', 'fill: var(--color-ignore)');\n        });\n    }\n\n    function renderPuzzlePreview () {\n        return (\n            <Group alignment='center' title='Puzzle'>\n                <div\n                    className={`${className}__puzzle-preview`}\n                    onClick={(event) => puzzleClickHandler(event)}\n                    data-tooltip='Assign color'\n                    data-tooltip-position='center'\n                >\n                    <PuzzlePreview\n                        cacheRequests={false}\n                        hash={puzzlePreviewHash}\n                        onErrorCallback={puzzlePreviewErrorHandler}\n                        onLoadCallback={puzzlePreviewLoadHandler}\n                        source={source}\n                    />\n                </div>\n            </Group>\n        );\n    }\n\n    function renderColorPalette () {\n        return (\n            <Group alignment='center' title='Color Palette'>\n                <ul className={`${className}__list`}>\n                    <li className={`${className}__item`}>\n                        {renderColor('--color-ignore')}\n                    </li>\n                    {\n                        Object.keys(colorScheme).map((colorName) => (\n                            <li className={`${className}__item`} key={`item-${colorName}`}>\n                                {renderColor(colorName)}\n                            </li>\n                        ))\n                    }\n                </ul>\n            </Group>\n        );\n    }\n\n    function renderColor (colorName) {\n        if (!colorName) {\n            throw new Error('Missing color name.');\n        }\n\n        return (\n            <button\n                aria-selected={colorName === activeColorName}\n                className={`${className}__color`}\n                onClick={() => setActiveColorName(colorName)}\n                style={{ backgroundColor: `var(${colorName})` }}\n                data-tooltip='Pick color'\n                data-tooltip-position='center'\n                type='button'\n            />\n        );\n    }\n\n    function renderActions () {\n        return (\n            <Group title='Actions'>\n                <List marginLeftIndex={2}>\n                    <Button\n                        callback={resetPuzzle}\n                        color='red'\n                        iconName='arrow-counter-clockwise'\n                        label='Reset Puzzle'\n                    />\n                    <Button\n                        callback={emptyPuzzle}\n                        iconName='broom'\n                        label='Empty Puzzle'\n                    />\n                    <Button\n                        callback={downloadButtonClickHandler}\n                        iconName='arrow-half-square-down'\n                        label='Download Image'\n                    />\n                </List>\n            </Group>\n        );\n    }\n\n    return (\n        <div className={className}>\n            {/* Puzzle Preview */}\n            {renderPuzzlePreview()}\n            {/* Color Palette */}\n            {renderColorPalette()}\n            {/* Actions */}\n            {renderActions()}\n        </div>\n    );\n}","import React from 'react';\nimport { Button } from '../components/Button';\nimport { Group } from '../components/Group';\nimport { Input } from '../components/Input';\nimport { List } from '../components/List';\nimport { TTrainer, TTrainerCase } from '../types';\nimport { getCaseImageSource, getCasesFromSet, getSets } from '../utils';\nimport { CasePreview } from './CasePreview';\n\ntype TProps = {\n    addCase: (setId: string) => void;\n    duplicateSet: (setId: string) => void;\n    moveSet: (setId: string, newPosition: number) => void;\n    openCaseModal: (caseId: string) => void;\n    puzzlePreviewHash: string;\n    removeSet: (setId: string) => void;\n    setTrainer: (trainer: TTrainer) => void;\n    trainer: TTrainer;\n    trainerSetId: string;\n};\n\nexport function EditorSet ({\n    addCase,\n    duplicateSet,\n    moveSet,\n    openCaseModal,\n    puzzlePreviewHash,\n    removeSet,\n    setTrainer,\n    trainer,\n    trainerSetId\n}: TProps) {\n    const className = 'editor-set';\n\n    const numberOfSets = getSets(trainer).length;\n    const trainerSet = trainer.sets[trainerSetId];\n    const setCases = getCasesFromSet(trainer, trainerSetId);\n\n    function renderInfo () {\n        return (\n            <Group title='Info'>\n                <ul className={`${className}__input-list`}>\n                    {/* Id */}\n                    <li className={`${className}__id`}>\n                        <Input\n                            defaultValue={trainerSet.id}\n                            disabled={true}\n                            label='Id'\n                            required={true}\n                            type='text'\n                        />\n                    </li>\n                    {/* Name */}\n                    <li className={`${className}__name`}>\n                        <Input\n                            callback={(value) => {\n                                setTrainer({\n                                    ...trainer,\n                                    sets: {\n                                        ...trainer.sets,\n                                        [trainerSetId]: {\n                                            ...trainer.sets[trainerSetId],\n                                            name: value as string\n                                        }\n                                    }\n                                });\n                            }}\n                            defaultValue={trainerSet.name}\n                            label='Name'\n                            required={true}\n                            type='text'\n                        />\n                    </li>\n                    {/* Position */}\n                    <li className={`${className}__position`}>\n                        <Input\n                            callback={(value) => {\n                                moveSet(trainerSetId, parseInt(value));\n                            }}\n                            defaultValue={trainerSet.position.toString()}\n                            label='Position'\n                            max={numberOfSets - 1}\n                            min={0}\n                            required={true}\n                            type='number'\n                        />\n                    </li>\n                </ul>\n                <List>\n                    <Button\n                        callback={() => duplicateSet(trainerSetId)}\n                        label='Duplicate Set'\n                        iconName='plus-square-double'\n                    />\n                    <Button\n                        callback={() => removeSet(trainerSetId)}\n                        color='red'\n                        label='Remove Set'\n                        iconName='trash'\n                    />\n                </List>\n            </Group>\n        );\n    }\n\n    function renderCases () {\n        return (\n            <Group alignment='left' title={`Cases (${setCases.length})`}>\n                <Button\n                    callback={() => addCase(trainerSetId)}\n                    iconName='plus-square'\n                    label='Add Case'\n                />\n                {\n                    setCases.length > 0 && (\n                        <ul className={`${className}__cases`}>\n                            {\n                                setCases.map((setCase) => (\n                                    <li\n                                        className={`${className}__case`}\n                                        key={`case-${setCase.id}`}\n                                    >\n                                        {renderCase(setCase)}\n                                    </li>\n                                ))\n                            }\n                        </ul>\n                    )\n                }\n            </Group>\n        );\n    }\n\n    function renderCase (trainerCase: TTrainerCase) {\n        if (!trainerCase) {\n            return null;\n        }\n\n        return (\n            <CasePreview\n                cacheRequests={false}\n                callback={() => openCaseModal(trainerCase.id)}\n                name={trainerCase.name}\n                position={trainerCase.position}\n                puzzlePreviewHash={puzzlePreviewHash}\n                source={getCaseImageSource(trainer.puzzleName, trainer.id, trainerCase.id)}\n                tooltip={'Edit case'}\n            />\n        );\n    }\n\n    return (\n        <div className={className}>\n            {renderInfo()}\n            {renderCases()}\n        </div>\n    );\n}","import React, { ReactNode, useEffect, useRef } from 'react';\nimport { ButtonRound } from '../components/ButtonRound';\nimport { useEventListener } from '../hooks';\nimport { trapFocus } from '../utils';\n\ntype TProps = {\n    children: ReactNode;\n    closeCallback: () => unknown;\n    open?: boolean;\n    title: string;\n};\n\nexport function Modal ({ children, closeCallback, open = false, title }: TProps) {\n    const className = 'modal';\n    const classNames = [className];\n\n    if (open) {\n        classNames.push(`${className}--open`);\n    }\n\n    const componentRef = useRef<HTMLDivElement>(null);\n    const buttonCloseRef = useRef<HTMLButtonElement>(null);\n\n    useEventListener(document, 'keydown', keydownHandler);\n\n    useEffect(() => {\n        if (open) {\n            // Set focus on close button\n            buttonCloseRef.current?.focus();\n\n            // Trap focus\n            if (componentRef.current) {\n                trapFocus(componentRef.current);\n            }\n        }\n    }, [open]);\n\n    function keydownHandler (event: KeyboardEvent) {\n        if (\n            event.altKey\n            || event.ctrlKey\n            || event.metaKey\n            || event.shiftKey\n        ) {\n            return;\n        }\n\n        // Escape\n        if (event.code === 'Escape') {\n            event.preventDefault();\n            close();\n        }\n    }\n\n    function close () {\n        if (open) {\n            closeCallback();\n        }\n    }\n\n    return open ? (\n        <div\n            aria-modal={true}\n            className={classNames.join(' ')}\n            inert={!open ? '' : null}\n            ref={componentRef}\n            role='dialog'\n        >\n            <div className={`${className}__content`}>\n                <h1 className={`${className}__title`}>{title}</h1>\n                <div className={`${className}__header`}>\n                    <ButtonRound\n                        callback={close}\n                        iconName='x'\n                        ref={buttonCloseRef}\n                        tooltip='Close modal (Escape)'\n                        tooltipPosition='right'\n                    />\n                </div>\n                {children}\n            </div>\n        </div>\n    ) : null;\n}","import React, { ChangeEvent, useEffect, useState } from 'react';\r\nimport { TSelectOption } from '../types';\r\nimport { getRandomInteger } from '../utils';\r\n\r\ntype TProps = {\r\n    callback: (value: string) => unknown;\r\n    defaultValue?: string;\r\n    label: string;\r\n    options: TSelectOption[];\r\n};\r\n\r\nexport function Select ({ callback, defaultValue, label, options }: TProps) {\r\n    const className = 'select';\r\n\r\n    const [value, setValue] = useState(defaultValue);\r\n\r\n    // Create unique id for the select\r\n    const selectId = `select-${getRandomInteger(100000, 999999)}`;\r\n\r\n    useEffect(() => {\r\n        // Set value to default value when options change\r\n        setValue(defaultValue);\r\n    }, [options]);\r\n\r\n    function changeHandler (event: ChangeEvent<HTMLSelectElement>) {\r\n        setValue(event.target.value);\r\n        callback(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <div className={className}>\r\n            <label className={`${className}__label`} htmlFor={selectId}>{label}</label>\r\n            <select\r\n                className={`${className}__select`}\r\n                id={selectId}\r\n                onChange={changeHandler}\r\n                value={value}\r\n            >\r\n                {\r\n                    options.map((option, index) => (\r\n                        <option value={option.value} key={`select-${selectId}-option-${index}`}>\r\n                            {option.label}\r\n                        </option>\r\n                    ))\r\n                }\r\n            </select>\r\n        </div>\r\n    );\r\n}","import React, { ChangeEvent, useEffect, useState } from 'react';\r\nimport { getRandomInteger } from '../utils';\r\n\r\ntype TProps = {\r\n    callback: (value: string | number) => unknown;\r\n    defaultValue?: string | number;\r\n    label: string;\r\n    required?: boolean;\r\n};\r\n\r\nexport function Textarea ({ callback, defaultValue, label, required = false }: TProps) {\r\n    const className = 'textarea';\r\n\r\n    const [value, setValue] = useState(defaultValue);\r\n\r\n    // Create unique id for the textarea\r\n    const textareaId = `textarea-${getRandomInteger(100000, 999999)}`;\r\n\r\n    useEffect(() => {\r\n        // Update default value it changes\r\n        setValue(defaultValue);\r\n    }, [defaultValue]);\r\n\r\n    function changeHandler (event: ChangeEvent<HTMLTextAreaElement>) {\r\n        setValue(event.target.value);\r\n        callback(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <div className={className}>\r\n            <label className={`${className}__label`} htmlFor={textareaId}>\r\n                {label} {required && <span className={`${className}__required`}>*</span>}\r\n            </label>\r\n            <textarea\r\n                className={`${className}__textarea`}\r\n                id={textareaId}\r\n                onChange={changeHandler}\r\n                required={required}\r\n                value={value}\r\n            />\r\n        </div>\r\n    );\r\n}"],"names":["$parcel$interopDefault","a","__esModule","default","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$ayMG0","$d9b513d63d79678d$exports","$ee040e257a097984$exports","$g779E","$88035f224ff89479$exports","array","iteratee","index","length","$5i71d","$0b43ef5c64ba7f70$exports","$cYlGN","$LAMcS","object","source","$0e266213253a5976$exports","$f4lqP","$uQ1Em","$aA0pv","$ce60b583e6a24a63$exports","$6YcYN","$55e06195de8b50ba$exports","$77e3eeed2d30c6bc$exports","$hynws","$cdnOB","$clnSu","Object","getOwnPropertySymbols","result","$apVCl","$d1b85174ea17081a$exports","$ctgi8","$67A6V","$392dfd68f4953502$exports","$392dfd68f4953502$var$hasOwnProperty","$392dfd68f4953502$var$objectProto","prototype","hasOwnProperty","constructor","input","$85aa01d56b12d536$exports","$jjbq1","$7d49423a2080f7e8$exports","dataView","isDeep","buffer","byteOffset","byteLength","$42a38980bea1ca34$exports","$42a38980bea1ca34$var$reFlags","regexp","exec","lastIndex","$e3a191b3227aae5b$exports","$57wYk","$e3a191b3227aae5b$var$symbolProto","undefined","$e3a191b3227aae5b$var$symbolValueOf","valueOf","symbol","$5JAGM","tag","Ctor","$dFJsF","$o8HxT","$f504n","$abac330771f68232$exports","$7262133281c40437$exports","$8l89S","value","$91Qdd","$jIny1","$abac330771f68232$var$nodeIsMap","isMap","$lsJ54","$e8d4e2fa1f2b8f08$exports","$aad482e59457493b$exports","$e8d4e2fa1f2b8f08$var$nodeIsSet","isSet","$ee040e257a097984$var$argsTag","$ee040e257a097984$var$funcTag","$ee040e257a097984$var$objectTag","$ee040e257a097984$var$cloneableTags","$ee040e257a097984$var$baseClone","bitmask","customizer","key","stack","isFlat","isFull","isArr","isFunc","stacked","get","set","forEach","subValue","add","keysFunc","props","$d9b513d63d79678d$var$CLONE_DEEP_FLAG","$acw62","$aRPiL","$izgog","$6naUs","$iGgHx","$d3f2d60ec9a53303$export$f5b8910cec6cf069","callback","defaultValue","disabled","label","largeLetterSpacing","max","min","required","type","className","classNames","push","setValue","useState","inputId","getRandomInteger","useEffect","jsxs","join","children","htmlFor","jsx","onBlur","event","trimmedValue","target","trim","onChange","$bO1fg","$6UJSz","$avait","$5dcd0673c9efb9c7$export$a9bdc75bef574af8","addSolution","duplicateCase","moveCase","openPreviewModal","puzzlePreviewHash","removeCase","removeSolution","setTrainer","trainer","trainerCaseId","trainerSetId","numberOfCases","getCasesFromSet","trainerCase","cases","numberOfSolutions","solutions","Group","title","name","parseInt","position","toString","List","Button","iconName","color","renderPreview","getCaseImageSource","puzzleName","alignment","PuzzlePreview","cacheRequests","setup","map","solution","Fragment","newSolutions","moveSolution","tooltip","Separator","currentIndex","newIndex","solutionToMove","splice","unshift","$ftrVQ","$f48019685109d4e9$export$4dbcfed276ad8cd8","activeColorName","setActiveColorName","setPuzzlePreviewHash","Math","random","setSource","svgRef","setSvgRef","colorScheme","storeManager","getColorScheme","renderColor","colorName","onClick","style","backgroundColor","tagName","setAttribute","hash","onErrorCallback","puzzleImage","onLoadCallback","keys","marginLeftIndex","current","pathElements","querySelectorAll","pathElement","file","Blob","outerHTML","linkElement","document","createElement","href","URL","createObjectURL","download","click","$d4TLH","$b4f3609a99daaab4$export$72aaff55e29e5d8c","addCase","duplicateSet","moveSet","openCaseModal","removeSet","numberOfSets","getSets","trainerSet","sets","setCases","setCase","CasePreview","$AUWqP","$k2p8j","$cZKrT","$e2b3f2946effb7d0$export$2b77a92f1a5ad772","closeCallback","open","componentRef","useRef","buttonCloseRef","close","useEventListener","altKey","ctrlKey","metaKey","shiftKey","preventDefault","focus","trapFocus","inert","ref","role","ButtonRound","tooltipPosition","$fcogW","$e7904f39f9c0fb66$export$ef9b1a59e592288f","options","selectId","option","$1870dbfc6a16a2d8$export$379139ebc1c2b235","textareaId","$65UFG","$8068a1e5d9cb5eb6$var$rootElement","getElementById","root","createRoot","render","ErrorBoundary","method","version","authors","description","setId","activeTrainerSetId","setActiveTrainerSetId","activeTrainerCaseId","setActiveTrainerCaseId","modalSetOpen","setModalSetOpen","modalCaseOpen","setModalCaseOpen","modalPreviewOpen","setModalPreviewOpen","trainerSets","numberOfSetsWithDeleted","numberOfCasesWithDeleted","getCases","console","log","updateColorSchemeCustomProperties","window","addEventListener","disableBodyScroll","enableBodyScroll","Page","renderConfiguration","puzzleOptions","puzzleNames","puzzleImagesOptions","puzzleImages","image","capitalize","split","replace","renderSet","numberOfCasesInSet","openSetModal","confirm","inputElement","files","text","then","newTrainer","JSON","parse","error","alert","stringify","newCases","casesFromSet","newCase","newPosition","newSets","oldPosition","newSetId","caseId","deleted","newCaseId","solutionIndex"],"version":3,"file":"editor.75cb1f96.js.map"}